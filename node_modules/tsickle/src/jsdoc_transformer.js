/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("tsickle/src/jsdoc_transformer", ["require", "exports", "typescript", "tsickle/src/annotator_host", "tsickle/src/decorators", "tsickle/src/googmodule", "tsickle/src/jsdoc", "tsickle/src/module_type_translator", "tsickle/src/transformer_util", "tsickle/src/transformer_util", "tsickle/src/type_translator"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @fileoverview jsdoc_transformer contains the logic to add JSDoc comments to TypeScript code.
     *
     * One of tsickle's features is to add Closure Compiler compatible JSDoc comments containing type
     * annotations, inheritance information, etc., onto TypeScript code. This allows Closure Compiler to
     * make better optimization decisions compared to an untyped code base.
     *
     * The entry point to the annotation operation is jsdocTransformer below. It adds synthetic comments
     * to existing TypeScript constructs, for example:
     *     const x: number = 1;
     * Might get transformed to:
     *     /.. \@type {number} ./
     *     const x: number = 1;
     * Later TypeScript phases then remove the type annotation, and the final emit is JavaScript that
     * only contains the JSDoc comment.
     *
     * To handle certain constructs, this transformer also performs AST transformations, e.g. by adding
     * CommonJS-style exports for type constructs, expanding `export *`, parenthesizing casts, etc.
     */
    const ts = require("typescript");
    const annotator_host_1 = require("tsickle/src/annotator_host");
    const decorators_1 = require("tsickle/src/decorators");
    const googmodule = require("tsickle/src/googmodule");
    const jsdoc = require("tsickle/src/jsdoc");
    const module_type_translator_1 = require("tsickle/src/module_type_translator");
    const transformerUtil = require("tsickle/src/transformer_util");
    const transformer_util_1 = require("tsickle/src/transformer_util");
    const type_translator_1 = require("tsickle/src/type_translator");
    function addCommentOn(node, tags, escapeExtraTags) {
        const comment = jsdoc.toSynthesizedComment(tags, escapeExtraTags);
        const comments = ts.getSyntheticLeadingComments(node) || [];
        comments.push(comment);
        ts.setSyntheticLeadingComments(node, comments);
        return comment;
    }
    /** Adds an \@template clause to docTags if decl has type parameters. */
    function maybeAddTemplateClause(docTags, decl) {
        if (!decl.typeParameters)
            return;
        // Closure does not support template constraints (T extends X), these are ignored below.
        docTags.push({
            tagName: 'template',
            text: decl.typeParameters.map(tp => transformerUtil.getIdentifierText(tp.name)).join(', ')
        });
    }
    exports.maybeAddTemplateClause = maybeAddTemplateClause;
    /**
     * Adds heritage clauses (\@extends, \@implements) to the given docTags for decl. Used by
     * jsdoc_transformer and externs generation.
     */
    function maybeAddHeritageClauses(docTags, mtt, decl) {
        if (!decl.heritageClauses)
            return;
        const isClass = decl.kind === ts.SyntaxKind.ClassDeclaration;
        const hasExtends = decl.heritageClauses.some(c => c.token === ts.SyntaxKind.ExtendsKeyword);
        for (const heritage of decl.heritageClauses) {
            const isExtends = heritage.token === ts.SyntaxKind.ExtendsKeyword;
            if (isClass && isExtends) {
                // If a class has an "extends", that is preserved in the ES6 output
                // and we don't need to emit any additional jsdoc.
                //
                // However for ambient declarations, we only emit externs, and in those we do need to
                // add "@extends {Foo}" as they use ES5 syntax.
                if (!transformerUtil.isAmbient(decl))
                    continue;
            }
            // Otherwise, if we get here, we need to emit some jsdoc.
            for (const expr of heritage.types) {
                const heritage = heritageName(isExtends, hasExtends, expr);
                // heritageName may return null, indicating that the clause is something inexpressible
                // in Closure, e.g. "class Foo implements Partial<Bar>".
                if (heritage) {
                    docTags.push({
                        tagName: heritage.tagName,
                        type: heritage.parentName,
                    });
                }
            }
        }
        /**
         * Computes the Closure name of an expression occurring in a heritage clause,
         * e.g. "implements FooBar".  Will return null if the expression is inexpressible
         * in Closure semantics.  Note that we don't need to consider all possible
         * combinations of types/values and extends/implements because our input is
         * already verified to be valid TypeScript.  See test_files/class/ for the full
         * cartesian product of test cases.
         * @param isExtends True if we're in an 'extends', false in an 'implements'.
         * @param hasExtends True if there are any 'extends' clauses present at all.
         */
        function heritageName(isExtends, hasExtends, expr) {
            let tagName = isExtends ? 'extends' : 'implements';
            let sym = mtt.typeChecker.getSymbolAtLocation(expr.expression);
            if (!sym) {
                // It's possible for a class declaration to extend an expression that
                // does not have have a symbol, for example when a mixin function is
                // used to build a base class, as in `declare MyClass extends
                // MyMixin(MyBaseClass)`.
                //
                // Handling this correctly is tricky. Closure throws on this
                // `extends <expression>` syntax (see
                // https://github.com/google/closure-compiler/issues/2182). We would
                // probably need to generate an intermediate class declaration and
                // extend that.
                mtt.debugWarn(decl, `could not resolve supertype: ${expr.getText()}`);
                return null;
            }
            // Resolve any aliases to the underlying type.
            if (sym.flags & ts.SymbolFlags.TypeAlias) {
                // It's implementing a type alias.  Follow the type alias back
                // to the original symbol to check whether it's a type or a value.
                const type = mtt.typeChecker.getDeclaredTypeOfSymbol(sym);
                if (!type.symbol) {
                    // It's not clear when this can happen.
                    mtt.debugWarn(decl, `could not get type of symbol: ${expr.getText()}`);
                    return null;
                }
                sym = type.symbol;
            }
            if (sym.flags & ts.SymbolFlags.Alias) {
                sym = mtt.typeChecker.getAliasedSymbol(sym);
            }
            const typeTranslator = mtt.newTypeTranslator(expr.expression);
            if (typeTranslator.isBlackListed(sym)) {
                // Don't emit references to blacklisted types.
                return null;
            }
            if (sym.flags & ts.SymbolFlags.Class) {
                if (!isClass) {
                    // Closure interfaces cannot extend or implements classes.
                    mtt.debugWarn(decl, `omitting interface deriving from class: ${expr.getText()}`);
                    return null;
                }
                if (!isExtends) {
                    if (!hasExtends) {
                        // A special case: for a class that has no existing 'extends' clause but does
                        // have an 'implements' clause that refers to another class, we change it to
                        // instead be an 'extends'.  This was a poorly-thought-out hack that may
                        // actually cause compiler bugs:
                        //   https://github.com/google/closure-compiler/issues/3126
                        // but we have code that now relies on it, ugh.
                        tagName = 'extends';
                    }
                    else {
                        // Closure can only @implements an interface, not a class.
                        mtt.debugWarn(decl, `omitting @implements of a class: ${expr.getText()}`);
                        return null;
                    }
                }
            }
            else if (sym.flags & ts.SymbolFlags.Value) {
                // If it's something other than a class in the value namespace, then it will
                // not be a type in the Closure output (because Closure collapses
                // the type and value namespaces).
                mtt.debugWarn(decl, `omitting heritage reference to a type/value conflict: ${expr.getText()}`);
                return null;
            }
            else if (sym.flags & ts.SymbolFlags.TypeLiteral) {
                // A type literal is a type like `{foo: string}`.
                // These can come up as the output of a mapped type.
                mtt.debugWarn(decl, `omitting heritage reference to a type literal: ${expr.getText()}`);
                return null;
            }
            // typeToClosure includes nullability modifiers, so call symbolToString directly here.
            const parentName = typeTranslator.symbolToString(sym);
            if (!parentName)
                return null;
            return { tagName, parentName };
        }
    }
    exports.maybeAddHeritageClauses = maybeAddHeritageClauses;
    /**
     * createMemberTypeDeclaration emits the type annotations for members of a class. It's necessary in
     * the case where TypeScript syntax specifies there are additional properties on the class, because
     * to declare these in Closure you must declare these separately from the class.
     *
     * createMemberTypeDeclaration produces an if (false) statement containing property declarations, or
     * null if no declarations could or needed to be generated (e.g. no members, or an unnamed type).
     * The if statement is used to make sure the code is not executed, otherwise property accesses could
     * trigger getters on a superclass. See test_files/fields/fields.ts:BaseThatThrows.
     */
    function createMemberTypeDeclaration(mtt, typeDecl) {
        // Gather parameter properties from the constructor, if it exists.
        const ctors = [];
        let paramProps = [];
        const nonStaticProps = [];
        const staticProps = [];
        const unhandled = [];
        const abstractMethods = [];
        for (const member of typeDecl.members) {
            if (member.kind === ts.SyntaxKind.Constructor) {
                ctors.push(member);
            }
            else if (ts.isPropertyDeclaration(member) || ts.isPropertySignature(member)) {
                const isStatic = transformerUtil.hasModifierFlag(member, ts.ModifierFlags.Static);
                if (isStatic) {
                    staticProps.push(member);
                }
                else {
                    nonStaticProps.push(member);
                }
            }
            else if (member.kind === ts.SyntaxKind.MethodDeclaration ||
                member.kind === ts.SyntaxKind.MethodSignature ||
                member.kind === ts.SyntaxKind.GetAccessor || member.kind === ts.SyntaxKind.SetAccessor) {
                if (transformerUtil.hasModifierFlag(member, ts.ModifierFlags.Abstract) ||
                    ts.isInterfaceDeclaration(typeDecl)) {
                    abstractMethods.push(member);
                }
                // Non-abstract methods only exist on classes, and are handled in regular emit.
            }
            else {
                unhandled.push(member);
            }
        }
        if (ctors.length > 0) {
            // Only the actual constructor implementation, which must be last in a potential sequence of
            // overloaded constructors, may contain parameter properties.
            const ctor = ctors[ctors.length - 1];
            paramProps = ctor.parameters.filter(p => transformerUtil.hasModifierFlag(p, ts.ModifierFlags.ParameterPropertyModifier));
        }
        if (nonStaticProps.length === 0 && paramProps.length === 0 && staticProps.length === 0 &&
            abstractMethods.length === 0) {
            // There are no members so we don't need to emit any type
            // annotations helper.
            return null;
        }
        if (!typeDecl.name) {
            mtt.debugWarn(typeDecl, 'cannot add types on unnamed declarations');
            return null;
        }
        const className = transformerUtil.getIdentifierText(typeDecl.name);
        const staticPropAccess = ts.createIdentifier(className);
        const instancePropAccess = ts.createPropertyAccess(staticPropAccess, 'prototype');
        // Closure Compiler will report conformance errors about this being unknown type when emitting
        // class properties as {?|undefined}, instead of just {?}. So make sure to only emit {?|undefined}
        // on interfaces.
        const isInterface = ts.isInterfaceDeclaration(typeDecl);
        const propertyDecls = staticProps.map(p => createClosurePropertyDeclaration(mtt, staticPropAccess, p, isInterface && !!p.questionToken));
        propertyDecls.push(...[...nonStaticProps, ...paramProps].map(p => createClosurePropertyDeclaration(mtt, instancePropAccess, p, isInterface && !!p.questionToken)));
        propertyDecls.push(...unhandled.map(p => transformerUtil.createMultiLineComment(p, `Skipping unhandled member: ${escapeForComment(p.getText())}`)));
        for (const fnDecl of abstractMethods) {
            // If the function declaration is computed, its name is the computed expression; otherwise, its
            // name can be resolved to a string.
            const name = fnDecl.name && ts.isComputedPropertyName(fnDecl.name) ? fnDecl.name.expression :
                propertyName(fnDecl);
            if (!name) {
                mtt.error(fnDecl, 'anonymous abstract function');
                continue;
            }
            const { tags, parameterNames } = mtt.getFunctionTypeJSDoc([fnDecl], []);
            if (decorators_1.hasExportingDecorator(fnDecl, mtt.typeChecker))
                tags.push({ tagName: 'export' });
            // Use element access instead of property access for compued names.
            const lhs = typeof name === 'string' ? ts.createPropertyAccess(instancePropAccess, name) :
                ts.createElementAccess(instancePropAccess, name);
            // memberNamespace because abstract methods cannot be static in TypeScript.
            const abstractFnDecl = ts.createStatement(ts.createAssignment(lhs, ts.createFunctionExpression(
            /* modifiers */ undefined, 
            /* asterisk */ undefined, 
            /* name */ undefined, 
            /* typeParameters */ undefined, parameterNames.map(n => ts.createParameter(
            /* decorators */ undefined, /* modifiers */ undefined, 
            /* dotDotDot */ undefined, n)), undefined, ts.createBlock([]))));
            ts.setSyntheticLeadingComments(abstractFnDecl, [jsdoc.toSynthesizedComment(tags)]);
            propertyDecls.push(ts.setSourceMapRange(abstractFnDecl, fnDecl));
        }
        // See test_files/fields/fields.ts:BaseThatThrows for a note on this wrapper.
        return ts.createIf(ts.createLiteral(false), ts.createBlock(propertyDecls, true));
    }
    function propertyName(prop) {
        if (!prop.name)
            return null;
        switch (prop.name.kind) {
            case ts.SyntaxKind.Identifier:
                return transformerUtil.getIdentifierText(prop.name);
            case ts.SyntaxKind.StringLiteral:
                // E.g. interface Foo { 'bar': number; }
                // If 'bar' is a name that is not valid in Closure then there's nothing we can do.
                const text = prop.name.text;
                if (!type_translator_1.isValidClosurePropertyName(text))
                    return null;
                return text;
            default:
                return null;
        }
    }
    /** Removes comment metacharacters from a string, to make it safe to embed in a comment. */
    function escapeForComment(str) {
        return str.replace(/\/\*/g, '__').replace(/\*\//g, '__');
    }
    exports.escapeForComment = escapeForComment;
    function createClosurePropertyDeclaration(mtt, expr, prop, optional) {
        const name = propertyName(prop);
        if (!name) {
            mtt.debugWarn(prop, `handle unnamed member:\n${escapeForComment(prop.getText())}`);
            return transformerUtil.createMultiLineComment(prop, `Skipping unnamed member:\n${escapeForComment(prop.getText())}`);
        }
        let type = mtt.typeToClosure(prop);
        // When a property is optional, e.g.
        //   foo?: string;
        // Then the TypeScript type of the property is string|undefined, the
        // typeToClosure translation handles it correctly, and string|undefined is
        // how you write an optional property in Closure.
        //
        // But in the special case of an optional property with type any:
        //   foo?: any;
        // The TypeScript type of the property is just "any" (because any includes
        // undefined as well) so our default translation of the type is just "?".
        // To mark the property as optional in Closure it must have "|undefined",
        // so the Closure type must be ?|undefined.
        if (optional && type === '?')
            type += '|undefined';
        const tags = mtt.getJSDoc(prop, /* reportWarnings */ true);
        tags.push({ tagName: 'type', type });
        const flags = ts.getCombinedModifierFlags(prop);
        if (flags & ts.ModifierFlags.Protected) {
            tags.push({ tagName: 'protected' });
        }
        else if (flags & ts.ModifierFlags.Private) {
            tags.push({ tagName: 'private' });
        }
        if (decorators_1.hasExportingDecorator(prop, mtt.typeChecker)) {
            tags.push({ tagName: 'export' });
        }
        const declStmt = ts.setSourceMapRange(ts.createStatement(ts.createPropertyAccess(expr, name)), prop);
        // Avoid printing annotations that can conflict with @type
        // This avoids Closure's error "type annotation incompatible with other annotations"
        addCommentOn(declStmt, tags, jsdoc.TAGS_CONFLICTING_WITH_TYPE);
        return declStmt;
    }
    /**
     * Removes any type assertions and non-null expressions from the AST before TypeScript processing.
     *
     * Ideally, the code in jsdoc_transformer below should just remove the cast expression and
     * replace it with the Closure equivalent. However Angular's compiler is fragile to AST
     * nodes being removed or changing type, so the code must retain the type assertion
     * expression, see: https://github.com/angular/angular/issues/24895.
     *
     * tsickle also cannot just generate and keep a `(/.. @type {SomeType} ./ (expr as SomeType))`
     * because TypeScript removes the parenthesized expressions in that syntax, (reasonably) believing
     * they were only added for the TS cast.
     *
     * The final workaround is then to keep the TypeScript type assertions, and have a post-Angular
     * processing step that removes the assertions before TypeScript sees them.
     *
     * TODO(martinprobst): remove once the Angular issue is fixed.
     */
    function removeTypeAssertions() {
        return (context) => {
            return (sourceFile) => {
                function visitor(node) {
                    switch (node.kind) {
                        case ts.SyntaxKind.TypeAssertionExpression:
                        case ts.SyntaxKind.AsExpression:
                            return ts.visitNode(node.expression, visitor);
                        case ts.SyntaxKind.NonNullExpression:
                            return ts.visitNode(node.expression, visitor);
                        default:
                            break;
                    }
                    return ts.visitEachChild(node, visitor, context);
                }
                return visitor(sourceFile);
            };
        };
    }
    exports.removeTypeAssertions = removeTypeAssertions;
    /**
     * jsdocTransformer returns a transformer factory that converts TypeScript types into the equivalent
     * JSDoc annotations.
     */
    function jsdocTransformer(host, tsOptions, typeChecker, diagnostics, thisTypeByAsyncFunction) {
        return (context) => {
            return (sourceFile) => {
                const moduleTypeTranslator = new module_type_translator_1.ModuleTypeTranslator(sourceFile, typeChecker, host, diagnostics, /*isForExterns*/ false);
                /**
                 * The set of all names exported from an export * in the current module. Used to prevent
                 * emitting duplicated exports. The first export * takes precedence in ES6.
                 */
                const expandedStarImports = new Set();
                /**
                 * While Closure compiler supports parameterized types, including parameterized `this` on
                 * methods, it does not support constraints on them. That means that an `\@template`d type is
                 * always considered to be `unknown` within the method, including `THIS`.
                 *
                 * To help Closure Compiler, we keep track of any templated this return type, and substitute
                 * explicit casts to the templated type.
                 *
                 * This is an incomplete solution and works around a specific problem with warnings on unknown
                 * this accesses. More generally, Closure also cannot infer constraints for any other
                 * templated types, but that might require a more general solution in Closure Compiler.
                 */
                let contextThisType = null;
                function visitClassDeclaration(classDecl) {
                    const contextThisTypeBackup = contextThisType;
                    const mjsdoc = moduleTypeTranslator.getMutableJSDoc(classDecl);
                    if (transformerUtil.hasModifierFlag(classDecl, ts.ModifierFlags.Abstract)) {
                        mjsdoc.tags.push({ tagName: 'abstract' });
                    }
                    maybeAddTemplateClause(mjsdoc.tags, classDecl);
                    if (!host.untyped) {
                        maybeAddHeritageClauses(mjsdoc.tags, moduleTypeTranslator, classDecl);
                    }
                    mjsdoc.updateComment();
                    const decls = [];
                    const memberDecl = createMemberTypeDeclaration(moduleTypeTranslator, classDecl);
                    // WARNING: order is significant; we must create the member decl before transforming away
                    // parameter property comments when visiting the constructor.
                    decls.push(ts.visitEachChild(classDecl, visitor, context));
                    if (memberDecl)
                        decls.push(memberDecl);
                    contextThisType = contextThisTypeBackup;
                    return decls;
                }
                /**
                 * visitHeritageClause works around a Closure Compiler issue, where the expression in an
                 * "extends" clause must be a simple identifier, and in particular must not be a parenthesized
                 * expression.
                 *
                 * This is triggered when TS code writes "class X extends (Foo as Bar) { ... }", commonly done
                 * to support mixins. For extends clauses in classes, the code below drops the cast and any
                 * parentheticals, leaving just the original expression.
                 *
                 * This is an incomplete workaround, as Closure will still bail on other super expressions,
                 * but retains compatibility with the previous emit that (accidentally) dropped the cast
                 * expression.
                 *
                 * TODO(martinprobst): remove this once the Closure side issue has been resolved.
                 */
                function visitHeritageClause(heritageClause) {
                    if (heritageClause.token !== ts.SyntaxKind.ExtendsKeyword || !heritageClause.parent ||
                        heritageClause.parent.kind === ts.SyntaxKind.InterfaceDeclaration) {
                        return ts.visitEachChild(heritageClause, visitor, context);
                    }
                    if (heritageClause.types.length !== 1) {
                        moduleTypeTranslator.error(heritageClause, `expected exactly one type in class extension clause`);
                    }
                    const type = heritageClause.types[0];
                    let expr = type.expression;
                    while (ts.isParenthesizedExpression(expr) || ts.isNonNullExpression(expr) ||
                        ts.isAssertionExpression(expr)) {
                        expr = expr.expression;
                    }
                    return ts.updateHeritageClause(heritageClause, [ts.updateExpressionWithTypeArguments(type, type.typeArguments || [], expr)]);
                }
                function visitInterfaceDeclaration(iface) {
                    const sym = typeChecker.getSymbolAtLocation(iface.name);
                    if (!sym) {
                        moduleTypeTranslator.error(iface, 'interface with no symbol');
                        return [];
                    }
                    // If this symbol is both a type and a value, we cannot emit both into Closure's
                    // single namespace.
                    if (transformer_util_1.symbolIsValue(typeChecker, sym)) {
                        moduleTypeTranslator.debugWarn(iface, `type/symbol conflict for ${sym.name}, using {?} for now`);
                        return [transformerUtil.createSingleLineComment(iface, 'WARNING: interface has both a type and a value, skipping emit')];
                    }
                    const tags = moduleTypeTranslator.getJSDoc(iface, /* reportWarnings */ true) || [];
                    tags.push({ tagName: 'record' });
                    maybeAddTemplateClause(tags, iface);
                    if (!host.untyped) {
                        maybeAddHeritageClauses(tags, moduleTypeTranslator, iface);
                    }
                    const name = transformerUtil.getIdentifierText(iface.name);
                    const modifiers = transformerUtil.hasModifierFlag(iface, ts.ModifierFlags.Export) ?
                        [ts.createToken(ts.SyntaxKind.ExportKeyword)] :
                        undefined;
                    const decl = ts.setSourceMapRange(ts.createFunctionDeclaration(
                    /* decorators */ undefined, modifiers, 
                    /* asterisk */ undefined, name, 
                    /* typeParameters */ undefined, 
                    /* parameters */ [], 
                    /* type */ undefined, 
                    /* body */ ts.createBlock([])), iface);
                    addCommentOn(decl, tags);
                    const memberDecl = createMemberTypeDeclaration(moduleTypeTranslator, iface);
                    return memberDecl ? [decl, memberDecl] : [decl];
                }
                /** Returns the `this` type in this context, or undefined if none. */
                function getContextThisType(node) {
                    while (node) {
                        if (ts.isClassDeclaration(node) && node.name) {
                            return typeChecker.getTypeAtLocation(node.name);
                        }
                        if (ts.isFunctionDeclaration(node) && node.parameters.length > 0) {
                            const firstParam = node.parameters[0];
                            // ts.Signature does not expose a `this` type, so comparing identifier names to 'this'
                            // is the only way to find a this type declaration.
                            if (ts.isIdentifier(firstParam.name) &&
                                transformerUtil.getIdentifierText(firstParam.name) === 'this' && firstParam.type) {
                                return typeChecker.getTypeAtLocation(firstParam.type);
                            }
                        }
                        node = node.parent;
                    }
                    return undefined;
                }
                /** Function declarations are emitted as they are, with only JSDoc added. */
                function visitFunctionLikeDeclaration(fnDecl) {
                    if (!fnDecl.body) {
                        // Two cases: abstract methods and overloaded methods/functions.
                        // Abstract methods are handled in emitTypeAnnotationsHandler.
                        // Overloads are union-ized into the shared type in FunctionType.
                        return ts.visitEachChild(fnDecl, visitor, context);
                    }
                    const extraTags = [];
                    if (decorators_1.hasExportingDecorator(fnDecl, typeChecker))
                        extraTags.push({ tagName: 'export' });
                    const { tags, thisReturnType } = moduleTypeTranslator.getFunctionTypeJSDoc([fnDecl], extraTags);
                    if (transformerUtil.hasModifierFlag(fnDecl, ts.ModifierFlags.Async)) {
                        // Store the this type for async functions, so that it can be added later on the result of
                        // TypeScript's await down-levelling. See await_transformer.ts.
                        const thisType = getContextThisType(ts.getOriginalNode(fnDecl));
                        if (thisType) {
                            const thisTypeString = moduleTypeTranslator.newTypeTranslator(fnDecl).translate(thisType);
                            thisTypeByAsyncFunction.set(fnDecl, thisTypeString);
                        }
                    }
                    // top-level async functions when down-leveled access `this` to pass it to
                    // tslib.__awaiter. Closure requires a @this tag for that.
                    if ((tsOptions.target !== undefined && tsOptions.target <= ts.ScriptTarget.ES2015) &&
                        transformerUtil.hasModifierFlag(fnDecl, ts.ModifierFlags.Async) &&
                        // Methods/getters/setters/ctors already have an implicit this.
                        fnDecl.kind === ts.SyntaxKind.FunctionDeclaration &&
                        // There might be an explicit `this: T` type.
                        !tags.some(t => t.tagName === 'this')) {
                        tags.push({ tagName: 'this', type: '*' });
                    }
                    const mjsdoc = moduleTypeTranslator.getMutableJSDoc(fnDecl);
                    mjsdoc.tags = tags;
                    mjsdoc.updateComment();
                    const contextThisTypeBackup = contextThisType;
                    // Arrow functions retain their context `this` type. All others reset the this type to
                    // either none (if not specified) or the type given in a fn(this: T, ...) declaration.
                    if (!ts.isArrowFunction(fnDecl))
                        contextThisType = thisReturnType;
                    const result = ts.visitEachChild(fnDecl, visitor, context);
                    contextThisType = contextThisTypeBackup;
                    return result;
                }
                /**
                 * In methods with a templated this type, adds explicit casts to accesses on this.
                 *
                 * @see contextThisType
                 */
                function visitThisExpression(node) {
                    if (!contextThisType)
                        return ts.visitEachChild(node, visitor, context);
                    return createClosureCast(node, node, contextThisType);
                }
                /**
                 * visitVariableStatement flattens variable declaration lists (`var a, b;` to `var a; var
                 * b;`), and attaches JSDoc comments to each variable. JSDoc comments preceding the
                 * original variable are attached to the first newly created one.
                 */
                function visitVariableStatement(varStmt) {
                    const stmts = [];
                    // "const", "let", etc are stored in node flags on the declarationList.
                    const flags = ts.getCombinedNodeFlags(varStmt.declarationList);
                    let tags = moduleTypeTranslator.getJSDoc(varStmt, /* reportWarnings */ true);
                    const leading = ts.getSyntheticLeadingComments(varStmt);
                    if (leading) {
                        // Attach non-JSDoc comments to a not emitted statement.
                        const commentHolder = ts.createNotEmittedStatement(varStmt);
                        ts.setSyntheticLeadingComments(commentHolder, leading.filter(c => c.text[0] !== '*'));
                        stmts.push(commentHolder);
                    }
                    const declList = ts.visitNode(varStmt.declarationList, visitor);
                    for (const decl of declList.declarations) {
                        const localTags = [];
                        if (tags) {
                            // Add any tags and docs preceding the entire statement to the first variable.
                            localTags.push(...tags);
                            tags = null;
                        }
                        // Add an @type for plain identifiers, but not for bindings patterns (i.e. object or array
                        // destructuring - those do not have a syntax in Closure) or @defines, which already
                        // declare their type.
                        if (ts.isIdentifier(decl.name)) {
                            // For variables that are initialized and use a blacklisted type, do not emit a type at
                            // all. Closure Compiler might be able to infer a better type from the initializer than
                            // the `?` the code below would emit.
                            // TODO(martinprobst): consider doing this for all types that get emitted as ?, not just
                            // for blacklisted ones.
                            const blackListedInitialized = !!decl.initializer && moduleTypeTranslator.isBlackListed(decl);
                            if (!blackListedInitialized) {
                                // getOriginalNode(decl) is required because the type checker cannot type check
                                // synthesized nodes.
                                const typeStr = moduleTypeTranslator.typeToClosure(ts.getOriginalNode(decl));
                                // If @define is present then add the type to it, rather than adding a normal @type.
                                const defineTag = localTags.find(({ tagName }) => tagName === 'define');
                                if (defineTag) {
                                    defineTag.type = typeStr;
                                }
                                else {
                                    localTags.push({ tagName: 'type', type: typeStr });
                                }
                            }
                        }
                        const newStmt = ts.createVariableStatement(varStmt.modifiers, ts.createVariableDeclarationList([decl], flags));
                        if (localTags.length)
                            addCommentOn(newStmt, localTags, jsdoc.TAGS_CONFLICTING_WITH_TYPE);
                        stmts.push(newStmt);
                    }
                    return stmts;
                }
                /**
                 * shouldEmitExportsAssignments returns true if tsickle should emit `exports.Foo = ...` style
                 * export statements.
                 *
                 * TypeScript modules can export types. Because types are pure design-time constructs in
                 * TypeScript, it does not emit any actual exported symbols for these. But tsickle has to emit
                 * an export, so that downstream Closure code (including tsickle-converted Closure code) can
                 * import upstream types. tsickle has to pick a module format for that, because the pure ES6
                 * export would get stripped by TypeScript.
                 *
                 * tsickle uses CommonJS to emit googmodule, and code not using googmodule doesn't care about
                 * the Closure annotations anyway, so tsickle skips emitting exports if the module target
                 * isn't commonjs.
                 */
                function shouldEmitExportsAssignments() {
                    return tsOptions.module === ts.ModuleKind.CommonJS;
                }
                function visitTypeAliasDeclaration(typeAlias) {
                    const sym = moduleTypeTranslator.mustGetSymbolAtLocation(typeAlias.name);
                    // If the type is also defined as a value, skip emitting it. Closure collapses type & value
                    // namespaces, the two emits would conflict if tsickle emitted both.
                    if (transformer_util_1.symbolIsValue(typeChecker, sym))
                        return [];
                    if (!shouldEmitExportsAssignments())
                        return [];
                    const typeName = typeAlias.name.getText();
                    // Blacklist any type parameters, Closure does not support type aliases with type
                    // parameters.
                    moduleTypeTranslator.newTypeTranslator(typeAlias).blacklistTypeParameters(moduleTypeTranslator.symbolsToAliasedNames, typeAlias.typeParameters);
                    const typeStr = host.untyped ? '?' : moduleTypeTranslator.typeToClosure(typeAlias, undefined);
                    // We want to emit a @typedef.  They are a bit weird because they are 'var' statements
                    // that have no value.
                    const tags = moduleTypeTranslator.getJSDoc(typeAlias, /* reportWarnings */ true);
                    tags.push({ tagName: 'typedef', type: typeStr });
                    const isExported = transformerUtil.hasModifierFlag(typeAlias, ts.ModifierFlags.Export);
                    let decl;
                    if (isExported) {
                        // Given: export type T = ...;
                        // We cannot emit `export var foo;` and let TS generate from there because TypeScript
                        // drops exports that are never assigned values, and Closure requires us to not assign
                        // values to typedef exports. Introducing a new local variable and exporting it can cause
                        // bugs due to name shadowing and confusing TypeScript's logic on what symbols and types
                        // vs values are exported. Mangling the name to avoid the conflicts would be reasonably
                        // clean, but would require a two pass emit to first find all type alias names, mangle
                        // them, and emit the use sites only later.
                        // So we produce: exports.T;
                        decl = ts.createStatement(ts.createPropertyAccess(ts.createIdentifier('exports'), ts.createIdentifier(typeName)));
                    }
                    else {
                        // Given: type T = ...;
                        // We produce: var T;
                        // Note: not const, because 'const Foo;' is illegal;
                        // not let, because we want hoisting behavior for types.
                        decl = ts.createVariableStatement(
                        /* modifiers */ undefined, ts.createVariableDeclarationList([ts.createVariableDeclaration(ts.createIdentifier(typeName))]));
                    }
                    decl = ts.setSourceMapRange(decl, typeAlias);
                    addCommentOn(decl, tags, jsdoc.TAGS_CONFLICTING_WITH_TYPE);
                    return [decl];
                }
                /** Emits a parenthesized Closure cast: `(/** \@type ... * / (expr))`. */
                function createClosureCast(context, expression, type) {
                    const inner = ts.createParen(expression);
                    const comment = addCommentOn(inner, [{ tagName: 'type', type: moduleTypeTranslator.typeToClosure(context, type) }]);
                    comment.hasTrailingNewLine = false;
                    return ts.setSourceMapRange(ts.createParen(inner), context);
                }
                /** Converts a TypeScript type assertion into a Closure Cast. */
                function visitAssertionExpression(assertion) {
                    const type = typeChecker.getTypeAtLocation(assertion.type);
                    return createClosureCast(assertion, ts.visitEachChild(assertion, visitor, context), type);
                }
                /**
                 * Converts a TypeScript non-null assertion into a Closure Cast, by stripping |null and
                 * |undefined from a union type.
                 */
                function visitNonNullExpression(nonNull) {
                    const type = typeChecker.getTypeAtLocation(nonNull.expression);
                    const nonNullType = typeChecker.getNonNullableType(type);
                    return createClosureCast(nonNull, ts.visitEachChild(nonNull, visitor, context), nonNullType);
                }
                function visitImportDeclaration(importDecl) {
                    // For each import, insert a goog.requireType for the module, so that if TypeScript does not
                    // emit the module because it's only used in type positions, the JSDoc comments still
                    // reference a valid Closure level symbol.
                    // No need to requireType side effect imports.
                    if (!importDecl.importClause)
                        return importDecl;
                    const sym = typeChecker.getSymbolAtLocation(importDecl.moduleSpecifier);
                    // Scripts do not have a symbol, and neither do unused modules. Scripts can still be
                    // imported, either as side effect imports or with an empty import set ("{}"). TypeScript
                    // does not emit a runtime load for an import with an empty list of symbols, but the import
                    // forces any global declarations from the library to be visible, which is what users use
                    // this for. No symbols from the script need requireType, so just return.
                    // TODO(evmar): revisit this.  If TS needs to see the module import, it's likely Closure
                    // does too.
                    if (!sym)
                        return importDecl;
                    const importPath = googmodule.resolveModuleName({ options: tsOptions, moduleResolutionHost: host.moduleResolutionHost }, sourceFile.fileName, importDecl.moduleSpecifier.text);
                    moduleTypeTranslator.requireType(importPath, sym, 
                    /* default import? */ !!importDecl.importClause.name);
                    return importDecl;
                }
                /**
                 * Closure Compiler will fail when it finds incorrect JSDoc tags on nodes. This function
                 * parses and then re-serializes JSDoc comments, escaping or removing illegal tags.
                 */
                function escapeIllegalJSDoc(node) {
                    const mjsdoc = moduleTypeTranslator.getMutableJSDoc(node);
                    mjsdoc.updateComment();
                }
                /** Returns true if a value export should be emitted for the given symbol in export *. */
                function shouldEmitValueExportForSymbol(sym) {
                    if (sym.flags & ts.SymbolFlags.Alias) {
                        sym = typeChecker.getAliasedSymbol(sym);
                    }
                    if ((sym.flags & ts.SymbolFlags.Value) === 0) {
                        // Note: We create explicit exports of type symbols for closure in visitExportDeclaration.
                        return false;
                    }
                    if (!tsOptions.preserveConstEnums && sym.flags & ts.SymbolFlags.ConstEnum) {
                        return false;
                    }
                    return true;
                }
                /**
                 * visitExportDeclaration requireTypes exported modules and emits explicit exports for
                 * types (which normally do not get emitted by TypeScript).
                 */
                function visitExportDeclaration(exportDecl) {
                    const importedModuleSymbol = exportDecl.moduleSpecifier &&
                        typeChecker.getSymbolAtLocation(exportDecl.moduleSpecifier);
                    if (importedModuleSymbol) {
                        // requireType all explicitly imported modules, so that symbols can be referenced and
                        // type only modules are usable from type declarations.
                        moduleTypeTranslator.requireType(exportDecl.moduleSpecifier.text, importedModuleSymbol, 
                        /* default import? */ false);
                    }
                    const typesToExport = [];
                    if (!exportDecl.exportClause) {
                        // export * from '...'
                        // Resolve the * into all value symbols exported, and update the export declaration.
                        // Explicitly spelled out exports (i.e. the exports of the current module) take precedence
                        // over implicit ones from export *. Use the current module's exports to filter.
                        const currentModuleSymbol = typeChecker.getSymbolAtLocation(sourceFile);
                        const currentModuleExports = currentModuleSymbol && currentModuleSymbol.exports;
                        if (!importedModuleSymbol) {
                            moduleTypeTranslator.error(exportDecl, `export * without module symbol`);
                            return exportDecl;
                        }
                        const exportedSymbols = typeChecker.getExportsOfModule(importedModuleSymbol);
                        const exportSpecifiers = [];
                        for (const sym of exportedSymbols) {
                            if (currentModuleExports && currentModuleExports.has(sym.escapedName))
                                continue;
                            // We might have already generated an export for the given symbol.
                            if (expandedStarImports.has(sym.name))
                                continue;
                            expandedStarImports.add(sym.name);
                            // Only create an export specifier for values that are exported. For types, the code
                            // below creates specific export statements that match Closure's expectations.
                            if (shouldEmitValueExportForSymbol(sym)) {
                                exportSpecifiers.push(ts.createExportSpecifier(undefined, sym.name));
                            }
                            else {
                                typesToExport.push([sym.name, sym]);
                            }
                        }
                        exportDecl = ts.updateExportDeclaration(exportDecl, exportDecl.decorators, exportDecl.modifiers, ts.createNamedExports(exportSpecifiers), exportDecl.moduleSpecifier);
                    }
                    else {
                        for (const exp of exportDecl.exportClause.elements) {
                            const exportedName = transformerUtil.getIdentifierText(exp.name);
                            typesToExport.push([exportedName, moduleTypeTranslator.mustGetSymbolAtLocation(exp.name)]);
                        }
                    }
                    // Do not emit typedef re-exports in untyped mode.
                    if (host.untyped)
                        return exportDecl;
                    const result = [exportDecl];
                    for (const [exportedName, sym] of typesToExport) {
                        let aliasedSymbol = sym;
                        if (sym.flags & ts.SymbolFlags.Alias) {
                            aliasedSymbol = typeChecker.getAliasedSymbol(sym);
                        }
                        const isTypeAlias = (aliasedSymbol.flags & ts.SymbolFlags.Value) === 0 &&
                            (aliasedSymbol.flags & (ts.SymbolFlags.TypeAlias | ts.SymbolFlags.Interface)) !== 0;
                        if (!isTypeAlias)
                            continue;
                        const typeName = moduleTypeTranslator.symbolsToAliasedNames.get(aliasedSymbol) || aliasedSymbol.name;
                        const stmt = ts.createStatement(ts.createPropertyAccess(ts.createIdentifier('exports'), exportedName));
                        addCommentOn(stmt, [{ tagName: 'typedef', type: '!' + typeName }]);
                        ts.addSyntheticTrailingComment(stmt, ts.SyntaxKind.SingleLineCommentTrivia, ' re-export typedef', true);
                        result.push(stmt);
                    }
                    return result;
                }
                /**
                 * Returns the identifiers exported in a single exported statement - typically just one
                 * identifier (e.g. for `export function foo()`), but multiple for `export declare var a, b`.
                 */
                function getExportDeclarationNames(node) {
                    switch (node.kind) {
                        case ts.SyntaxKind.VariableStatement:
                            const varDecl = node;
                            return varDecl.declarationList.declarations.map((d) => getExportDeclarationNames(d)[0]);
                        case ts.SyntaxKind.VariableDeclaration:
                        case ts.SyntaxKind.FunctionDeclaration:
                        case ts.SyntaxKind.InterfaceDeclaration:
                        case ts.SyntaxKind.ClassDeclaration:
                        case ts.SyntaxKind.ModuleDeclaration:
                        case ts.SyntaxKind.EnumDeclaration:
                            const decl = node;
                            if (!decl.name || decl.name.kind !== ts.SyntaxKind.Identifier) {
                                break;
                            }
                            return [decl.name];
                        case ts.SyntaxKind.TypeAliasDeclaration:
                            const typeAlias = node;
                            return [typeAlias.name];
                        default:
                            break;
                    }
                    moduleTypeTranslator.error(node, `unsupported export declaration ${ts.SyntaxKind[node.kind]}: ${node.getText()}`);
                    return [];
                }
                /**
                 * Ambient declarations declare types for TypeScript's benefit, and will be removed by
                 * TypeScript during its emit phase. Downstream Closure code however might be importing
                 * symbols from this module, so tsickle must emit a Closure-compatible exports declaration.
                 */
                function visitExportedAmbient(node) {
                    if (host.untyped || !shouldEmitExportsAssignments())
                        return [node];
                    const declNames = getExportDeclarationNames(node);
                    const result = [node];
                    for (const decl of declNames) {
                        const sym = typeChecker.getSymbolAtLocation(decl);
                        // Non-value objects do not exist at runtime, so we cannot access the symbol (it only
                        // exists in externs). Export them as a typedef, which forwards to the type in externs.
                        // Note: TypeScript emits odd code for exported ambients (exports.x for variables, just x
                        // for everything else). That seems buggy, and in either case this code should not attempt
                        // to fix it.
                        // See also https://github.com/Microsoft/TypeScript/issues/8015.
                        if (!transformer_util_1.symbolIsValue(typeChecker, sym)) {
                            // Do not emit re-exports for ModuleDeclarations.
                            // Ambient ModuleDeclarations are always referenced as global symbols, so they don't
                            // need to be exported.
                            if (node.kind === ts.SyntaxKind.ModuleDeclaration)
                                continue;
                            const mangledName = annotator_host_1.moduleNameAsIdentifier(host, sourceFile.fileName);
                            const declName = transformerUtil.getIdentifierText(decl);
                            const stmt = ts.createStatement(ts.createPropertyAccess(ts.createIdentifier('exports'), declName));
                            addCommentOn(stmt, [{ tagName: 'typedef', type: `!${mangledName}.${declName}` }]);
                            result.push(stmt);
                        }
                    }
                    return result;
                }
                function visitor(node) {
                    if (transformerUtil.isAmbient(node)) {
                        if (!transformerUtil.hasModifierFlag(node, ts.ModifierFlags.Export)) {
                            return node;
                        }
                        return visitExportedAmbient(node);
                    }
                    switch (node.kind) {
                        case ts.SyntaxKind.ImportDeclaration:
                            return visitImportDeclaration(node);
                        case ts.SyntaxKind.ExportDeclaration:
                            return visitExportDeclaration(node);
                        case ts.SyntaxKind.ClassDeclaration:
                            return visitClassDeclaration(node);
                        case ts.SyntaxKind.InterfaceDeclaration:
                            return visitInterfaceDeclaration(node);
                        case ts.SyntaxKind.HeritageClause:
                            return visitHeritageClause(node);
                        case ts.SyntaxKind.ArrowFunction:
                        case ts.SyntaxKind.FunctionExpression:
                            // Inserting a comment before an expression can trigger automatic semicolon insertion,
                            // e.g. if the function below is the expression in a `return` statement. Parenthesizing
                            // prevents ASI, as long as the opening paren remains on the same line (which it does).
                            return ts.createParen(visitFunctionLikeDeclaration(node));
                        case ts.SyntaxKind.Constructor:
                        case ts.SyntaxKind.FunctionDeclaration:
                        case ts.SyntaxKind.MethodDeclaration:
                        case ts.SyntaxKind.GetAccessor:
                        case ts.SyntaxKind.SetAccessor:
                            return visitFunctionLikeDeclaration(node);
                        case ts.SyntaxKind.ThisKeyword:
                            return visitThisExpression(node);
                        case ts.SyntaxKind.VariableStatement:
                            return visitVariableStatement(node);
                        case ts.SyntaxKind.PropertyDeclaration:
                        case ts.SyntaxKind.PropertyAssignment:
                            escapeIllegalJSDoc(node);
                            break;
                        case ts.SyntaxKind.Parameter:
                            // Parameter properties (e.g. `constructor(/** docs */ private foo: string)`) might have
                            // JSDoc comments, including JSDoc tags recognized by Closure Compiler. Prevent emitting
                            // any comments on them, so that Closure doesn't error on them.
                            // See test_files/parameter_properties.ts.
                            const paramDecl = node;
                            if (transformerUtil.hasModifierFlag(paramDecl, ts.ModifierFlags.ParameterPropertyModifier)) {
                                ts.setSyntheticLeadingComments(paramDecl, []);
                                jsdoc.suppressLeadingCommentsRecursively(paramDecl);
                            }
                            break;
                        case ts.SyntaxKind.TypeAliasDeclaration:
                            return visitTypeAliasDeclaration(node);
                        case ts.SyntaxKind.AsExpression:
                        case ts.SyntaxKind.TypeAssertionExpression:
                            return visitAssertionExpression(node);
                        case ts.SyntaxKind.NonNullExpression:
                            return visitNonNullExpression(node);
                        default:
                            break;
                    }
                    return ts.visitEachChild(node, visitor, context);
                }
                sourceFile = ts.visitEachChild(sourceFile, visitor, context);
                return moduleTypeTranslator.insertAdditionalImports(sourceFile);
            };
        };
    }
    exports.jsdocTransformer = jsdocTransformer;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNkb2NfdHJhbnNmb3JtZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvanNkb2NfdHJhbnNmb3JtZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HOzs7Ozs7Ozs7Ozs7SUFFSDs7Ozs7Ozs7Ozs7Ozs7Ozs7O09Ba0JHO0lBRUgsaUNBQWlDO0lBRWpDLCtEQUF1RTtJQUN2RSx1REFBbUQ7SUFDbkQscURBQTJDO0lBQzNDLDJDQUFpQztJQUNqQywrRUFBOEQ7SUFDOUQsZ0VBQXNEO0lBQ3RELG1FQUFpRDtJQUNqRCxpRUFBNkQ7SUFFN0QsU0FBUyxZQUFZLENBQUMsSUFBYSxFQUFFLElBQWlCLEVBQUUsZUFBNkI7UUFDbkYsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSxlQUFlLENBQUMsQ0FBQztRQUNsRSxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsMkJBQTJCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzVELFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdkIsRUFBRSxDQUFDLDJCQUEyQixDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztRQUMvQyxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBS0Qsd0VBQXdFO0lBQ3hFLFNBQWdCLHNCQUFzQixDQUFDLE9BQW9CLEVBQUUsSUFBdUI7UUFDbEYsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjO1lBQUUsT0FBTztRQUNqQyx3RkFBd0Y7UUFDeEYsT0FBTyxDQUFDLElBQUksQ0FBQztZQUNYLE9BQU8sRUFBRSxVQUFVO1lBQ25CLElBQUksRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxD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QUF5QixDQUFDLElBQStCLENBQUMsQ0FBQzt3QkFDcEUsS0FBSyxFQUFFLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQzt3QkFDaEMsS0FBSyxFQUFFLENBQUMsVUFBVSxDQUFDLHVCQUF1Qjs0QkFDeEMsT0FBTyx3QkFBd0IsQ0FBQyxJQUF3QixDQUFDLENBQUM7d0JBQzVELEtBQUssRUFBRSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUI7NEJBQ2xDLE9BQU8sc0JBQXNCLENBQUMsSUFBNEIsQ0FBQyxDQUFDO3dCQUM5RDs0QkFDRSxNQUFNO3FCQUNUO29CQUNELE9BQU8sRUFBRSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO2dCQUNuRCxDQUFDO2dCQUVELFVBQVUsR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBRTdELE9BQU8sb0JBQW9CLENBQUMsdUJBQXVCLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDbEUsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQWhuQkQsNENBZ25CQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGpzZG9jX3RyYW5zZm9ybWVyIGNvbnRhaW5zIHRoZSBsb2dpYyB0byBhZGQgSlNEb2MgY29tbWVudHMgdG8gVHlwZVNjcmlwdCBjb2RlLlxuICpcbiAqIE9uZSBvZiB0c2lja2xlJ3MgZmVhdHVyZXMgaXMgdG8gYWRkIENsb3N1cmUgQ29tcGlsZXIgY29tcGF0aWJsZSBKU0RvYyBjb21tZW50cyBjb250YWluaW5nIHR5cGVcbiAqIGFubm90YXRpb25zLCBpbmhlcml0YW5jZSBpbmZvcm1hdGlvbiwgZXRjLiwgb250byBUeXBlU2NyaXB0IGNvZGUuIFRoaXMgYWxsb3dzIENsb3N1cmUgQ29tcGlsZXIgdG9cbiAqIG1ha2UgYmV0dGVyIG9wdGltaXphdGlvbiBkZWNpc2lvbnMgY29tcGFyZWQgdG8gYW4gdW50eXBlZCBjb2RlIGJhc2UuXG4gKlxuICogVGhlIGVudHJ5IHBvaW50IHRvIHRoZSBhbm5vdGF0aW9uIG9wZXJhdGlvbiBpcyBqc2RvY1RyYW5zZm9ybWVyIGJlbG93LiBJdCBhZGRzIHN5bnRoZXRpYyBjb21tZW50c1xuICogdG8gZXhpc3RpbmcgVHlwZVNjcmlwdCBjb25zdHJ1Y3RzLCBmb3IgZXhhbXBsZTpcbiAqICAgICBjb25zdCB4OiBudW1iZXIgPSAxO1xuICogTWlnaHQgZ2V0IHRyYW5zZm9ybWVkIHRvOlxuICogICAgIC8uLiBcXEB0eXBlIHtudW1iZXJ9IC4vXG4gKiAgICAgY29uc3QgeDogbnVtYmVyID0gMTtcbiAqIExhdGVyIFR5cGVTY3JpcHQgcGhhc2VzIHRoZW4gcmVtb3ZlIHRoZSB0eXBlIGFubm90YXRpb24sIGFuZCB0aGUgZmluYWwgZW1pdCBpcyBKYXZhU2NyaXB0IHRoYXRcbiAqIG9ubHkgY29udGFpbnMgdGhlIEpTRG9jIGNvbW1lbnQuXG4gKlxuICogVG8gaGFuZGxlIGNlcnRhaW4gY29uc3RydWN0cywgdGhpcyB0cmFuc2Zvcm1lciBhbHNvIHBlcmZvcm1zIEFTVCB0cmFuc2Zvcm1hdGlvbnMsIGUuZy4gYnkgYWRkaW5nXG4gKiBDb21tb25KUy1zdHlsZSBleHBvcnRzIGZvciB0eXBlIGNvbnN0cnVjdHMsIGV4cGFuZGluZyBgZXhwb3J0ICpgLCBwYXJlbnRoZXNpemluZyBjYXN0cywgZXRjLlxuICovXG5cbmltcG9ydCAqIGFzIHRzIGZyb20gJ3R5cGVzY3JpcHQnO1xuXG5pbXBvcnQge0Fubm90YXRvckhvc3QsIG1vZHVsZU5hbWVBc0lkZW50aWZpZXJ9IGZyb20gJy4vYW5ub3RhdG9yX2hvc3QnO1xuaW1wb3J0IHtoYXNFeHBvcnRpbmdEZWNvcmF0b3J9IGZyb20gJy4vZGVjb3JhdG9ycyc7XG5pbXBvcnQgKiBhcyBnb29nbW9kdWxlIGZyb20gJy4vZ29vZ21vZHVsZSc7XG5pbXBvcnQgKiBhcyBqc2RvYyBmcm9tICcuL2pzZG9jJztcbmltcG9ydCB7TW9kdWxlVHlwZVRyYW5zbGF0b3J9IGZyb20gJy4vbW9kdWxlX3R5cGVfdHJhbnNsYXRvcic7XG5pbXBvcnQgKiBhcyB0cmFuc2Zvcm1lclV0aWwgZnJvbSAnLi90cmFuc2Zvcm1lcl91dGlsJztcbmltcG9ydCB7c3ltYm9sSXNWYWx1ZX0gZnJvbSAnLi90cmFuc2Zvcm1lcl91dGlsJztcbmltcG9ydCB7aXNWYWxpZENsb3N1cmVQcm9wZXJ0eU5hbWV9IGZyb20gJy4vdHlwZV90cmFuc2xhdG9yJztcblxuZnVuY3Rpb24gYWRkQ29tbWVudE9uKG5vZGU6IHRzLk5vZGUsIHRhZ3M6IGpzZG9jLlRhZ1tdLCBlc2NhcGVFeHRyYVRhZ3M/OiBTZXQ8c3RyaW5nPikge1xuICBjb25zdCBjb21tZW50ID0ganNkb2MudG9TeW50aGVzaXplZENvbW1lbnQodGFncywgZXNjYXBlRXh0cmFUYWdzKTtcbiAgY29uc3QgY29tbWVudHMgPSB0cy5nZXRTeW50aGV0aWNMZWFkaW5nQ29tbWVudHMobm9kZSkgfHwgW107XG4gIGNvbW1lbnRzLnB1c2goY29tbWVudCk7XG4gIHRzLnNldFN5bnRoZXRpY0xlYWRpbmdDb21tZW50cyhub2RlLCBjb21tZW50cyk7XG4gIHJldHVybiBjb21tZW50O1xufVxuXG50eXBlIEhhc1R5cGVQYXJhbWV0ZXJzID1cbiAgICB0cy5JbnRlcmZhY2VEZWNsYXJhdGlvbnx0cy5DbGFzc0xpa2VEZWNsYXJhdGlvbnx0cy5UeXBlQWxpYXNEZWNsYXJhdGlvbnx0cy5TaWduYXR1cmVEZWNsYXJhdGlvbjtcblxuLyoqIEFkZHMgYW4gXFxAdGVtcGxhdGUgY2xhdXNlIHRvIGRvY1RhZ3MgaWYgZGVjbCBoYXMgdHlwZSBwYXJhbWV0ZXJzLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1heWJlQWRkVGVtcGxhdGVDbGF1c2UoZG9jVGFnczoganNkb2MuVGFnW10sIGRlY2w6IEhhc1R5cGVQYXJhbWV0ZXJzKSB7XG4gIGlmICghZGVjbC50eXBlUGFyYW1ldGVycykgcmV0dXJuO1xuICAvLyBDbG9zdXJlIGRvZXMgbm90IHN1cHBvcnQgdGVtcGxhdGUgY29uc3RyYWludHMgKFQgZXh0ZW5kcyBYKSwgdGhlc2UgYXJlIGlnbm9yZWQgYmVsb3cuXG4gIGRvY1RhZ3MucHVzaCh7XG4gICAgdGFnTmFtZTogJ3RlbXBsYXRlJyxcbiAgICB0ZXh0OiBkZWNsLnR5cGVQYXJhbWV0ZXJzLm1hcCh0cCA9PiB0cmFuc2Zvcm1lclV0aWwuZ2V0SWRlbnRpZmllclRleHQodHAubmFtZSkpLmpvaW4oJywgJylcbiAgfSk7XG59XG5cbi8qKlxuICogQWRkcyBoZXJpdGFnZSBjbGF1c2VzIChcXEBleHRlbmRzLCBcXEBpbXBsZW1lbnRzKSB0byB0aGUgZ2l2ZW4gZG9jVGFncyBmb3IgZGVjbC4gVXNlZCBieVxuICoganNkb2NfdHJhbnNmb3JtZXIgYW5kIGV4dGVybnMgZ2VuZXJhdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1heWJlQWRkSGVyaXRhZ2VDbGF1c2VzKFxuICAgIGRvY1RhZ3M6IGpzZG9jLlRhZ1tdLCBtdHQ6IE1vZHVsZVR5cGVUcmFuc2xhdG9yLFxuICAgIGRlY2w6IHRzLkNsYXNzTGlrZURlY2xhcmF0aW9ufHRzLkludGVyZmFjZURlY2xhcmF0aW9uKSB7XG4gIGlmICghZGVjbC5oZXJpdGFnZUNsYXVzZXMpIHJldHVybjtcbiAgY29uc3QgaXNDbGFzcyA9IGRlY2wua2luZCA9PT0gdHMuU3ludGF4S2luZC5DbGFzc0RlY2xhcmF0aW9uO1xuICBjb25zdCBoYXNFeHRlbmRzID0gZGVjbC5oZXJpdGFnZUNsYXVzZXMuc29tZShjID0+IGMudG9rZW4gPT09IHRzLlN5bnRheEtpbmQuRXh0ZW5kc0tleXdvcmQpO1xuICBmb3IgKGNvbnN0IGhlcml0YWdlIG9mIGRlY2wuaGVyaXRhZ2VDbGF1c2VzKSB7XG4gICAgY29uc3QgaXNFeHRlbmRzID0gaGVyaXRhZ2UudG9rZW4gPT09IHRzLlN5bnRheEtpbmQuRXh0ZW5kc0tleXdvcmQ7XG4gICAgaWYgKGlzQ2xhc3MgJiYgaXNFeHRlbmRzKSB7XG4gICAgICAvLyBJZiBhIGNsYXNzIGhhcyBhbiBcImV4dGVuZHNcIiwgdGhhdCBpcyBwcmVzZXJ2ZWQgaW4gdGhlIEVTNiBvdXRwdXRcbiAgICAgIC8vIGFuZCB3ZSBkb24ndCBuZWVkIHRvIGVtaXQgYW55IGFkZGl0aW9uYWwganNkb2MuXG4gICAgICAvL1xuICAgICAgLy8gSG93ZXZlciBmb3IgYW1iaWVudCBkZWNsYXJhdGlvbnMsIHdlIG9ubHkgZW1pdCBleHRlcm5zLCBhbmQgaW4gdGhvc2Ugd2UgZG8gbmVlZCB0b1xuICAgICAgLy8gYWRkIFwiQGV4dGVuZHMge0Zvb31cIiBhcyB0aGV5IHVzZSBFUzUgc3ludGF4LlxuICAgICAgaWYgKCF0cmFuc2Zvcm1lclV0aWwuaXNBbWJpZW50KGRlY2wpKSBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UsIGlmIHdlIGdldCBoZXJlLCB3ZSBuZWVkIHRvIGVtaXQgc29tZSBqc2RvYy5cbiAgICBmb3IgKGNvbnN0IGV4cHIgb2YgaGVyaXRhZ2UudHlwZXMpIHtcbiAgICAgIGNvbnN0IGhlcml0YWdlID0gaGVyaXRhZ2VOYW1lKGlzRXh0ZW5kcywgaGFzRXh0ZW5kcywgZXhwcik7XG4gICAgICAvLyBoZXJpdGFnZU5hbWUgbWF5IHJldHVybiBudWxsLCBpbmRpY2F0aW5nIHRoYXQgdGhlIGNsYXVzZSBpcyBzb21ldGhpbmcgaW5leHByZXNzaWJsZVxuICAgICAgLy8gaW4gQ2xvc3VyZSwgZS5nLiBcImNsYXNzIEZvbyBpbXBsZW1lbnRzIFBhcnRpYWw8QmFyPlwiLlxuICAgICAgaWYgKGhlcml0YWdlKSB7XG4gICAgICAgIGRvY1RhZ3MucHVzaCh7XG4gICAgICAgICAgdGFnTmFtZTogaGVyaXRhZ2UudGFnTmFtZSxcbiAgICAgICAgICB0eXBlOiBoZXJpdGFnZS5wYXJlbnROYW1lLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ29tcHV0ZXMgdGhlIENsb3N1cmUgbmFtZSBvZiBhbiBleHByZXNzaW9uIG9jY3VycmluZyBpbiBhIGhlcml0YWdlIGNsYXVzZSxcbiAgICogZS5nLiBcImltcGxlbWVudHMgRm9vQmFyXCIuICBXaWxsIHJldHVybiBudWxsIGlmIHRoZSBleHByZXNzaW9uIGlzIGluZXhwcmVzc2libGVcbiAgICogaW4gQ2xvc3VyZSBzZW1hbnRpY3MuICBOb3RlIHRoYXQgd2UgZG9uJ3QgbmVlZCB0byBjb25zaWRlciBhbGwgcG9zc2libGVcbiAgICogY29tYmluYXRpb25zIG9mIHR5cGVzL3ZhbHVlcyBhbmQgZXh0ZW5kcy9pbXBsZW1lbnRzIGJlY2F1c2Ugb3VyIGlucHV0IGlzXG4gICAqIGFscmVhZHkgdmVyaWZpZWQgdG8gYmUgdmFsaWQgVHlwZVNjcmlwdC4gIFNlZSB0ZXN0X2ZpbGVzL2NsYXNzLyBmb3IgdGhlIGZ1bGxcbiAgICogY2FydGVzaWFuIHByb2R1Y3Qgb2YgdGVzdCBjYXNlcy5cbiAgICogQHBhcmFtIGlzRXh0ZW5kcyBUcnVlIGlmIHdlJ3JlIGluIGFuICdleHRlbmRzJywgZmFsc2UgaW4gYW4gJ2ltcGxlbWVudHMnLlxuICAgKiBAcGFyYW0gaGFzRXh0ZW5kcyBUcnVlIGlmIHRoZXJlIGFyZSBhbnkgJ2V4dGVuZHMnIGNsYXVzZXMgcHJlc2VudCBhdCBhbGwuXG4gICAqL1xuICBmdW5jdGlvbiBoZXJpdGFnZU5hbWUoXG4gICAgICBpc0V4dGVuZHM6IGJvb2xlYW4sIGhhc0V4dGVuZHM6IGJvb2xlYW4sXG4gICAgICBleHByOiB0cy5FeHByZXNzaW9uV2l0aFR5cGVBcmd1bWVudHMpOiB7dGFnTmFtZTogc3RyaW5nLCBwYXJlbnROYW1lOiBzdHJpbmd9fG51bGwge1xuICAgIGxldCB0YWdOYW1lID0gaXNFeHRlbmRzID8gJ2V4dGVuZHMnIDogJ2ltcGxlbWVudHMnO1xuICAgIGxldCBzeW0gPSBtdHQudHlwZUNoZWNrZXIuZ2V0U3ltYm9sQXRMb2NhdGlvbihleHByLmV4cHJlc3Npb24pO1xuICAgIGlmICghc3ltKSB7XG4gICAgICAvLyBJdCdzIHBvc3NpYmxlIGZvciBhIGNsYXNzIGRlY2xhcmF0aW9uIHRvIGV4dGVuZCBhbiBleHByZXNzaW9uIHRoYXRcbiAgICAgIC8vIGRvZXMgbm90IGhhdmUgaGF2ZSBhIHN5bWJvbCwgZm9yIGV4YW1wbGUgd2hlbiBhIG1peGluIGZ1bmN0aW9uIGlzXG4gICAgICAvLyB1c2VkIHRvIGJ1aWxkIGEgYmFzZSBjbGFzcywgYXMgaW4gYGRlY2xhcmUgTXlDbGFzcyBleHRlbmRzXG4gICAgICAvLyBNeU1peGluKE15QmFzZUNsYXNzKWAuXG4gICAgICAvL1xuICAgICAgLy8gSGFuZGxpbmcgdGhpcyBjb3JyZWN0bHkgaXMgdHJpY2t5LiBDbG9zdXJlIHRocm93cyBvbiB0aGlzXG4gICAgICAvLyBgZXh0ZW5kcyA8ZXhwcmVzc2lvbj5gIHN5bnRheCAoc2VlXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtY29tcGlsZXIvaXNzdWVzLzIxODIpLiBXZSB3b3VsZFxuICAgICAgLy8gcHJvYmFibHkgbmVlZCB0byBnZW5lcmF0ZSBhbiBpbnRlcm1lZGlhdGUgY2xhc3MgZGVjbGFyYXRpb24gYW5kXG4gICAgICAvLyBleHRlbmQgdGhhdC5cbiAgICAgIG10dC5kZWJ1Z1dhcm4oZGVjbCwgYGNvdWxkIG5vdCByZXNvbHZlIHN1cGVydHlwZTogJHtleHByLmdldFRleHQoKX1gKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIFJlc29sdmUgYW55IGFsaWFzZXMgdG8gdGhlIHVuZGVybHlpbmcgdHlwZS5cbiAgICBpZiAoc3ltLmZsYWdzICYgdHMuU3ltYm9sRmxhZ3MuVHlwZUFsaWFzKSB7XG4gICAgICAvLyBJdCdzIGltcGxlbWVudGluZyBhIHR5cGUgYWxpYXMuICBGb2xsb3cgdGhlIHR5cGUgYWxpYXMgYmFja1xuICAgICAgLy8gdG8gdGhlIG9yaWdpbmFsIHN5bWJvbCB0byBjaGVjayB3aGV0aGVyIGl0J3MgYSB0eXBlIG9yIGEgdmFsdWUuXG4gICAgICBjb25zdCB0eXBlID0gbXR0LnR5cGVDaGVja2VyLmdldERlY2xhcmVkVHlwZU9mU3ltYm9sKHN5bSk7XG4gICAgICBpZiAoIXR5cGUuc3ltYm9sKSB7XG4gICAgICAgIC8vIEl0J3Mgbm90IGNsZWFyIHdoZW4gdGhpcyBjYW4gaGFwcGVuLlxuICAgICAgICBtdHQuZGVidWdXYXJuKGRlY2wsIGBjb3VsZCBub3QgZ2V0IHR5cGUgb2Ygc3ltYm9sOiAke2V4cHIuZ2V0VGV4dCgpfWApO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHN5bSA9IHR5cGUuc3ltYm9sO1xuICAgIH1cbiAgICBpZiAoc3ltLmZsYWdzICYgdHMuU3ltYm9sRmxhZ3MuQWxpYXMpIHtcbiAgICAgIHN5bSA9IG10dC50eXBlQ2hlY2tlci5nZXRBbGlhc2VkU3ltYm9sKHN5bSk7XG4gICAgfVxuXG4gICAgY29uc3QgdHlwZVRyYW5zbGF0b3IgPSBtdHQubmV3VHlwZVRyYW5zbGF0b3IoZXhwci5leHByZXNzaW9uKTtcbiAgICBpZiAodHlwZVRyYW5zbGF0b3IuaXNCbGFja0xpc3RlZChzeW0pKSB7XG4gICAgICAvLyBEb24ndCBlbWl0IHJlZmVyZW5jZXMgdG8gYmxhY2tsaXN0ZWQgdHlwZXMuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoc3ltLmZsYWdzICYgdHMuU3ltYm9sRmxhZ3MuQ2xhc3MpIHtcbiAgICAgIGlmICghaXNDbGFzcykge1xuICAgICAgICAvLyBDbG9zdXJlIGludGVyZmFjZXMgY2Fubm90IGV4dGVuZCBvciBpbXBsZW1lbnRzIGNsYXNzZXMuXG4gICAgICAgIG10dC5kZWJ1Z1dhcm4oZGVjbCwgYG9taXR0aW5nIGludGVyZmFjZSBkZXJpdmluZyBmcm9tIGNsYXNzOiAke2V4cHIuZ2V0VGV4dCgpfWApO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmICghaXNFeHRlbmRzKSB7XG4gICAgICAgIGlmICghaGFzRXh0ZW5kcykge1xuICAgICAgICAgIC8vIEEgc3BlY2lhbCBjYXNlOiBmb3IgYSBjbGFzcyB0aGF0IGhhcyBubyBleGlzdGluZyAnZXh0ZW5kcycgY2xhdXNlIGJ1dCBkb2VzXG4gICAgICAgICAgLy8gaGF2ZSBhbiAnaW1wbGVtZW50cycgY2xhdXNlIHRoYXQgcmVmZXJzIHRvIGFub3RoZXIgY2xhc3MsIHdlIGNoYW5nZSBpdCB0b1xuICAgICAgICAgIC8vIGluc3RlYWQgYmUgYW4gJ2V4dGVuZHMnLiAgVGhpcyB3YXMgYSBwb29ybHktdGhvdWdodC1vdXQgaGFjayB0aGF0IG1heVxuICAgICAgICAgIC8vIGFjdHVhbGx5IGNhdXNlIGNvbXBpbGVyIGJ1Z3M6XG4gICAgICAgICAgLy8gICBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtY29tcGlsZXIvaXNzdWVzLzMxMjZcbiAgICAgICAgICAvLyBidXQgd2UgaGF2ZSBjb2RlIHRoYXQgbm93IHJlbGllcyBvbiBpdCwgdWdoLlxuICAgICAgICAgIHRhZ05hbWUgPSAnZXh0ZW5kcyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gQ2xvc3VyZSBjYW4gb25seSBAaW1wbGVtZW50cyBhbiBpbnRlcmZhY2UsIG5vdCBhIGNsYXNzLlxuICAgICAgICAgIG10dC5kZWJ1Z1dhcm4oZGVjbCwgYG9taXR0aW5nIEBpbXBsZW1lbnRzIG9mIGEgY2xhc3M6ICR7ZXhwci5nZXRUZXh0KCl9YCk7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHN5bS5mbGFncyAmIHRzLlN5bWJvbEZsYWdzLlZhbHVlKSB7XG4gICAgICAvLyBJZiBpdCdzIHNvbWV0aGluZyBvdGhlciB0aGFuIGEgY2xhc3MgaW4gdGhlIHZhbHVlIG5hbWVzcGFjZSwgdGhlbiBpdCB3aWxsXG4gICAgICAvLyBub3QgYmUgYSB0eXBlIGluIHRoZSBDbG9zdXJlIG91dHB1dCAoYmVjYXVzZSBDbG9zdXJlIGNvbGxhcHNlc1xuICAgICAgLy8gdGhlIHR5cGUgYW5kIHZhbHVlIG5hbWVzcGFjZXMpLlxuICAgICAgbXR0LmRlYnVnV2FybihcbiAgICAgICAgICBkZWNsLCBgb21pdHRpbmcgaGVyaXRhZ2UgcmVmZXJlbmNlIHRvIGEgdHlwZS92YWx1ZSBjb25mbGljdDogJHtleHByLmdldFRleHQoKX1gKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSBpZiAoc3ltLmZsYWdzICYgdHMuU3ltYm9sRmxhZ3MuVHlwZUxpdGVyYWwpIHtcbiAgICAgIC8vIEEgdHlwZSBsaXRlcmFsIGlzIGEgdHlwZSBsaWtlIGB7Zm9vOiBzdHJpbmd9YC5cbiAgICAgIC8vIFRoZXNlIGNhbiBjb21lIHVwIGFzIHRoZSBvdXRwdXQgb2YgYSBtYXBwZWQgdHlwZS5cbiAgICAgIG10dC5kZWJ1Z1dhcm4oZGVjbCwgYG9taXR0aW5nIGhlcml0YWdlIHJlZmVyZW5jZSB0byBhIHR5cGUgbGl0ZXJhbDogJHtleHByLmdldFRleHQoKX1gKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIHR5cGVUb0Nsb3N1cmUgaW5jbHVkZXMgbnVsbGFiaWxpdHkgbW9kaWZpZXJzLCBzbyBjYWxsIHN5bWJvbFRvU3RyaW5nIGRpcmVjdGx5IGhlcmUuXG4gICAgY29uc3QgcGFyZW50TmFtZSA9IHR5cGVUcmFuc2xhdG9yLnN5bWJvbFRvU3RyaW5nKHN5bSk7XG4gICAgaWYgKCFwYXJlbnROYW1lKSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4ge3RhZ05hbWUsIHBhcmVudE5hbWV9O1xuICB9XG59XG5cbi8qKlxuICogY3JlYXRlTWVtYmVyVHlwZURlY2xhcmF0aW9uIGVtaXRzIHRoZSB0eXBlIGFubm90YXRpb25zIGZvciBtZW1iZXJzIG9mIGEgY2xhc3MuIEl0J3MgbmVjZXNzYXJ5IGluXG4gKiB0aGUgY2FzZSB3aGVyZSBUeXBlU2NyaXB0IHN5bnRheCBzcGVjaWZpZXMgdGhlcmUgYXJlIGFkZGl0aW9uYWwgcHJvcGVydGllcyBvbiB0aGUgY2xhc3MsIGJlY2F1c2VcbiAqIHRvIGRlY2xhcmUgdGhlc2UgaW4gQ2xvc3VyZSB5b3UgbXVzdCBkZWNsYXJlIHRoZXNlIHNlcGFyYXRlbHkgZnJvbSB0aGUgY2xhc3MuXG4gKlxuICogY3JlYXRlTWVtYmVyVHlwZURlY2xhcmF0aW9uIHByb2R1Y2VzIGFuIGlmIChmYWxzZSkgc3RhdGVtZW50IGNvbnRhaW5pbmcgcHJvcGVydHkgZGVjbGFyYXRpb25zLCBvclxuICogbnVsbCBpZiBubyBkZWNsYXJhdGlvbnMgY291bGQgb3IgbmVlZGVkIHRvIGJlIGdlbmVyYXRlZCAoZS5nLiBubyBtZW1iZXJzLCBvciBhbiB1bm5hbWVkIHR5cGUpLlxuICogVGhlIGlmIHN0YXRlbWVudCBpcyB1c2VkIHRvIG1ha2Ugc3VyZSB0aGUgY29kZSBpcyBub3QgZXhlY3V0ZWQsIG90aGVyd2lzZSBwcm9wZXJ0eSBhY2Nlc3NlcyBjb3VsZFxuICogdHJpZ2dlciBnZXR0ZXJzIG9uIGEgc3VwZXJjbGFzcy4gU2VlIHRlc3RfZmlsZXMvZmllbGRzL2ZpZWxkcy50czpCYXNlVGhhdFRocm93cy5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlTWVtYmVyVHlwZURlY2xhcmF0aW9uKFxuICAgIG10dDogTW9kdWxlVHlwZVRyYW5zbGF0b3IsXG4gICAgdHlwZURlY2w6IHRzLkNsYXNzRGVjbGFyYXRpb258dHMuSW50ZXJmYWNlRGVjbGFyYXRpb24pOiB0cy5JZlN0YXRlbWVudHxudWxsIHtcbiAgLy8gR2F0aGVyIHBhcmFtZXRlciBwcm9wZXJ0aWVzIGZyb20gdGhlIGNvbnN0cnVjdG9yLCBpZiBpdCBleGlzdHMuXG4gIGNvbnN0IGN0b3JzOiB0cy5Db25zdHJ1Y3RvckRlY2xhcmF0aW9uW10gPSBbXTtcbiAgbGV0IHBhcmFtUHJvcHM6IHRzLlBhcmFtZXRlckRlY2xhcmF0aW9uW10gPSBbXTtcbiAgY29uc3Qgbm9uU3RhdGljUHJvcHM6IEFycmF5PHRzLlByb3BlcnR5RGVjbGFyYXRpb258dHMuUHJvcGVydHlTaWduYXR1cmU+ID0gW107XG4gIGNvbnN0IHN0YXRpY1Byb3BzOiBBcnJheTx0cy5Qcm9wZXJ0eURlY2xhcmF0aW9ufHRzLlByb3BlcnR5U2lnbmF0dXJlPiA9IFtdO1xuICBjb25zdCB1bmhhbmRsZWQ6IHRzLk5hbWVkRGVjbGFyYXRpb25bXSA9IFtdO1xuICBjb25zdCBhYnN0cmFjdE1ldGhvZHM6IHRzLkZ1bmN0aW9uTGlrZURlY2xhcmF0aW9uW10gPSBbXTtcbiAgZm9yIChjb25zdCBtZW1iZXIgb2YgdHlwZURlY2wubWVtYmVycykge1xuICAgIGlmIChtZW1iZXIua2luZCA9PT0gdHMuU3ludGF4S2luZC5Db25zdHJ1Y3Rvcikge1xuICAgICAgY3RvcnMucHVzaChtZW1iZXIgYXMgdHMuQ29uc3RydWN0b3JEZWNsYXJhdGlvbik7XG4gICAgfSBlbHNlIGlmICh0cy5pc1Byb3BlcnR5RGVjbGFyYXRpb24obWVtYmVyKSB8fCB0cy5pc1Byb3BlcnR5U2lnbmF0dXJlKG1lbWJlcikpIHtcbiAgICAgIGNvbnN0IGlzU3RhdGljID0gdHJhbnNmb3JtZXJVdGlsLmhhc01vZGlmaWVyRmxhZyhtZW1iZXIsIHRzLk1vZGlmaWVyRmxhZ3MuU3RhdGljKTtcbiAgICAgIGlmIChpc1N0YXRpYykge1xuICAgICAgICBzdGF0aWNQcm9wcy5wdXNoKG1lbWJlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub25TdGF0aWNQcm9wcy5wdXNoKG1lbWJlcik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChcbiAgICAgICAgbWVtYmVyLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuTWV0aG9kRGVjbGFyYXRpb24gfHxcbiAgICAgICAgbWVtYmVyLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuTWV0aG9kU2lnbmF0dXJlIHx8XG4gICAgICAgIG1lbWJlci5raW5kID09PSB0cy5TeW50YXhLaW5kLkdldEFjY2Vzc29yIHx8IG1lbWJlci5raW5kID09PSB0cy5TeW50YXhLaW5kLlNldEFjY2Vzc29yKSB7XG4gICAgICBpZiAodHJhbnNmb3JtZXJVdGlsLmhhc01vZGlmaWVyRmxhZyhtZW1iZXIsIHRzLk1vZGlmaWVyRmxhZ3MuQWJzdHJhY3QpIHx8XG4gICAgICAgICAgdHMuaXNJbnRlcmZhY2VEZWNsYXJhdGlvbih0eXBlRGVjbCkpIHtcbiAgICAgICAgYWJzdHJhY3RNZXRob2RzLnB1c2goXG4gICAgICAgICAgICBtZW1iZXIgYXMgdHMuTWV0aG9kRGVjbGFyYXRpb24gfCB0cy5HZXRBY2Nlc3NvckRlY2xhcmF0aW9uIHwgdHMuU2V0QWNjZXNzb3JEZWNsYXJhdGlvbik7XG4gICAgICB9XG4gICAgICAvLyBOb24tYWJzdHJhY3QgbWV0aG9kcyBvbmx5IGV4aXN0IG9uIGNsYXNzZXMsIGFuZCBhcmUgaGFuZGxlZCBpbiByZWd1bGFyIGVtaXQuXG4gICAgfSBlbHNlIHtcbiAgICAgIHVuaGFuZGxlZC5wdXNoKG1lbWJlcik7XG4gICAgfVxuICB9XG5cbiAgaWYgKGN0b3JzLmxlbmd0aCA+IDApIHtcbiAgICAvLyBPbmx5IHRoZSBhY3R1YWwgY29uc3RydWN0b3IgaW1wbGVtZW50YXRpb24sIHdoaWNoIG11c3QgYmUgbGFzdCBpbiBhIHBvdGVudGlhbCBzZXF1ZW5jZSBvZlxuICAgIC8vIG92ZXJsb2FkZWQgY29uc3RydWN0b3JzLCBtYXkgY29udGFpbiBwYXJhbWV0ZXIgcHJvcGVydGllcy5cbiAgICBjb25zdCBjdG9yID0gY3RvcnNbY3RvcnMubGVuZ3RoIC0gMV07XG4gICAgcGFyYW1Qcm9wcyA9IGN0b3IucGFyYW1ldGVycy5maWx0ZXIoXG4gICAgICAgIHAgPT4gdHJhbnNmb3JtZXJVdGlsLmhhc01vZGlmaWVyRmxhZyhwLCB0cy5Nb2RpZmllckZsYWdzLlBhcmFtZXRlclByb3BlcnR5TW9kaWZpZXIpKTtcbiAgfVxuXG4gIGlmIChub25TdGF0aWNQcm9wcy5sZW5ndGggPT09IDAgJiYgcGFyYW1Qcm9wcy5sZW5ndGggPT09IDAgJiYgc3RhdGljUHJvcHMubGVuZ3RoID09PSAwICYmXG4gICAgICBhYnN0cmFjdE1ldGhvZHMubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gVGhlcmUgYXJlIG5vIG1lbWJlcnMgc28gd2UgZG9uJ3QgbmVlZCB0byBlbWl0IGFueSB0eXBlXG4gICAgLy8gYW5ub3RhdGlvbnMgaGVscGVyLlxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKCF0eXBlRGVjbC5uYW1lKSB7XG4gICAgbXR0LmRlYnVnV2Fybih0eXBlRGVjbCwgJ2Nhbm5vdCBhZGQgdHlwZXMgb24gdW5uYW1lZCBkZWNsYXJhdGlvbnMnKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IGNsYXNzTmFtZSA9IHRyYW5zZm9ybWVyVXRpbC5nZXRJZGVudGlmaWVyVGV4dCh0eXBlRGVjbC5uYW1lKTtcbiAgY29uc3Qgc3RhdGljUHJvcEFjY2VzcyA9IHRzLmNyZWF0ZUlkZW50aWZpZXIoY2xhc3NOYW1lKTtcbiAgY29uc3QgaW5zdGFuY2VQcm9wQWNjZXNzID0gdHMuY3JlYXRlUHJvcGVydHlBY2Nlc3Moc3RhdGljUHJvcEFjY2VzcywgJ3Byb3RvdHlwZScpO1xuICAvLyBDbG9zdXJlIENvbXBpbGVyIHdpbGwgcmVwb3J0IGNvbmZvcm1hbmNlIGVycm9ycyBhYm91dCB0aGlzIGJlaW5nIHVua25vd24gdHlwZSB3aGVuIGVtaXR0aW5nXG4gIC8vIGNsYXNzIHByb3BlcnRpZXMgYXMgez98dW5kZWZpbmVkfSwgaW5zdGVhZCBvZiBqdXN0IHs/fS4gU28gbWFrZSBzdXJlIHRvIG9ubHkgZW1pdCB7P3x1bmRlZmluZWR9XG4gIC8vIG9uIGludGVyZmFjZXMuXG4gIGNvbnN0IGlzSW50ZXJmYWNlID0gdHMuaXNJbnRlcmZhY2VEZWNsYXJhdGlvbih0eXBlRGVjbCk7XG4gIGNvbnN0IHByb3BlcnR5RGVjbHMgPSBzdGF0aWNQcm9wcy5tYXAoXG4gICAgICBwID0+IGNyZWF0ZUNsb3N1cmVQcm9wZXJ0eURlY2xhcmF0aW9uKFxuICAgICAgICAgIG10dCwgc3RhdGljUHJvcEFjY2VzcywgcCwgaXNJbnRlcmZhY2UgJiYgISFwLnF1ZXN0aW9uVG9rZW4pKTtcbiAgcHJvcGVydHlEZWNscy5wdXNoKC4uLlsuLi5ub25TdGF0aWNQcm9wcywgLi4ucGFyYW1Qcm9wc10ubWFwKFxuICAgICAgcCA9PiBjcmVhdGVDbG9zdXJlUHJvcGVydHlEZWNsYXJhdGlvbihcbiAgICAgICAgICBtdHQsIGluc3RhbmNlUHJvcEFjY2VzcywgcCwgaXNJbnRlcmZhY2UgJiYgISFwLnF1ZXN0aW9uVG9rZW4pKSk7XG4gIHByb3BlcnR5RGVjbHMucHVzaCguLi51bmhhbmRsZWQubWFwKFxuICAgICAgcCA9PiB0cmFuc2Zvcm1lclV0aWwuY3JlYXRlTXVsdGlMaW5lQ29tbWVudChcbiAgICAgICAgICBwLCBgU2tpcHBpbmcgdW5oYW5kbGVkIG1lbWJlcjogJHtlc2NhcGVGb3JDb21tZW50KHAuZ2V0VGV4dCgpKX1gKSkpO1xuXG4gIGZvciAoY29uc3QgZm5EZWNsIG9mIGFic3RyYWN0TWV0aG9kcykge1xuICAgIC8vIElmIHRoZSBmdW5jdGlvbiBkZWNsYXJhdGlvbiBpcyBjb21wdXRlZCwgaXRzIG5hbWUgaXMgdGhlIGNvbXB1dGVkIGV4cHJlc3Npb247IG90aGVyd2lzZSwgaXRzXG4gICAgLy8gbmFtZSBjYW4gYmUgcmVzb2x2ZWQgdG8gYSBzdHJpbmcuXG4gICAgY29uc3QgbmFtZSA9IGZuRGVjbC5uYW1lICYmIHRzLmlzQ29tcHV0ZWRQcm9wZXJ0eU5hbWUoZm5EZWNsLm5hbWUpID8gZm5EZWNsLm5hbWUuZXhwcmVzc2lvbiA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lKGZuRGVjbCk7XG4gICAgaWYgKCFuYW1lKSB7XG4gICAgICBtdHQuZXJyb3IoZm5EZWNsLCAnYW5vbnltb3VzIGFic3RyYWN0IGZ1bmN0aW9uJyk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3Qge3RhZ3MsIHBhcmFtZXRlck5hbWVzfSA9IG10dC5nZXRGdW5jdGlvblR5cGVKU0RvYyhbZm5EZWNsXSwgW10pO1xuICAgIGlmIChoYXNFeHBvcnRpbmdEZWNvcmF0b3IoZm5EZWNsLCBtdHQudHlwZUNoZWNrZXIpKSB0YWdzLnB1c2goe3RhZ05hbWU6ICdleHBvcnQnfSk7XG4gICAgLy8gVXNlIGVsZW1lbnQgYWNjZXNzIGluc3RlYWQgb2YgcHJvcGVydHkgYWNjZXNzIGZvciBjb21wdWVkIG5hbWVzLlxuICAgIGNvbnN0IGxocyA9IHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyA/IHRzLmNyZWF0ZVByb3BlcnR5QWNjZXNzKGluc3RhbmNlUHJvcEFjY2VzcywgbmFtZSkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRzLmNyZWF0ZUVsZW1lbnRBY2Nlc3MoaW5zdGFuY2VQcm9wQWNjZXNzLCBuYW1lKTtcbiAgICAvLyBtZW1iZXJOYW1lc3BhY2UgYmVjYXVzZSBhYnN0cmFjdCBtZXRob2RzIGNhbm5vdCBiZSBzdGF0aWMgaW4gVHlwZVNjcmlwdC5cbiAgICBjb25zdCBhYnN0cmFjdEZuRGVjbCA9IHRzLmNyZWF0ZVN0YXRlbWVudCh0cy5jcmVhdGVBc3NpZ25tZW50KFxuICAgICAgICBsaHMsXG4gICAgICAgIHRzLmNyZWF0ZUZ1bmN0aW9uRXhwcmVzc2lvbihcbiAgICAgICAgICAgIC8qIG1vZGlmaWVycyAqLyB1bmRlZmluZWQsXG4gICAgICAgICAgICAvKiBhc3RlcmlzayAqLyB1bmRlZmluZWQsXG4gICAgICAgICAgICAvKiBuYW1lICovIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIC8qIHR5cGVQYXJhbWV0ZXJzICovIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHBhcmFtZXRlck5hbWVzLm1hcChcbiAgICAgICAgICAgICAgICBuID0+IHRzLmNyZWF0ZVBhcmFtZXRlcihcbiAgICAgICAgICAgICAgICAgICAgLyogZGVjb3JhdG9ycyAqLyB1bmRlZmluZWQsIC8qIG1vZGlmaWVycyAqLyB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIC8qIGRvdERvdERvdCAqLyB1bmRlZmluZWQsIG4pKSxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHRzLmNyZWF0ZUJsb2NrKFtdKSxcbiAgICAgICAgICAgICkpKTtcbiAgICB0cy5zZXRTeW50aGV0aWNMZWFkaW5nQ29tbWVudHMoYWJzdHJhY3RGbkRlY2wsIFtqc2RvYy50b1N5bnRoZXNpemVkQ29tbWVudCh0YWdzKV0pO1xuICAgIHByb3BlcnR5RGVjbHMucHVzaCh0cy5zZXRTb3VyY2VNYXBSYW5nZShhYnN0cmFjdEZuRGVjbCwgZm5EZWNsKSk7XG4gIH1cblxuICAvLyBTZWUgdGVzdF9maWxlcy9maWVsZHMvZmllbGRzLnRzOkJhc2VUaGF0VGhyb3dzIGZvciBhIG5vdGUgb24gdGhpcyB3cmFwcGVyLlxuICByZXR1cm4gdHMuY3JlYXRlSWYodHMuY3JlYXRlTGl0ZXJhbChmYWxzZSksIHRzLmNyZWF0ZUJsb2NrKHByb3BlcnR5RGVjbHMsIHRydWUpKTtcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlOYW1lKHByb3A6IHRzLk5hbWVkRGVjbGFyYXRpb24pOiBzdHJpbmd8bnVsbCB7XG4gIGlmICghcHJvcC5uYW1lKSByZXR1cm4gbnVsbDtcblxuICBzd2l0Y2ggKHByb3AubmFtZS5raW5kKSB7XG4gICAgY2FzZSB0cy5TeW50YXhLaW5kLklkZW50aWZpZXI6XG4gICAgICByZXR1cm4gdHJhbnNmb3JtZXJVdGlsLmdldElkZW50aWZpZXJUZXh0KHByb3AubmFtZSBhcyB0cy5JZGVudGlmaWVyKTtcbiAgICBjYXNlIHRzLlN5bnRheEtpbmQuU3RyaW5nTGl0ZXJhbDpcbiAgICAgIC8vIEUuZy4gaW50ZXJmYWNlIEZvbyB7ICdiYXInOiBudW1iZXI7IH1cbiAgICAgIC8vIElmICdiYXInIGlzIGEgbmFtZSB0aGF0IGlzIG5vdCB2YWxpZCBpbiBDbG9zdXJlIHRoZW4gdGhlcmUncyBub3RoaW5nIHdlIGNhbiBkby5cbiAgICAgIGNvbnN0IHRleHQgPSAocHJvcC5uYW1lIGFzIHRzLlN0cmluZ0xpdGVyYWwpLnRleHQ7XG4gICAgICBpZiAoIWlzVmFsaWRDbG9zdXJlUHJvcGVydHlOYW1lKHRleHQpKSByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiB0ZXh0O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKiogUmVtb3ZlcyBjb21tZW50IG1ldGFjaGFyYWN0ZXJzIGZyb20gYSBzdHJpbmcsIHRvIG1ha2UgaXQgc2FmZSB0byBlbWJlZCBpbiBhIGNvbW1lbnQuICovXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlRm9yQ29tbWVudChzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXFwvXFwqL2csICdfXycpLnJlcGxhY2UoL1xcKlxcLy9nLCAnX18nKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ2xvc3VyZVByb3BlcnR5RGVjbGFyYXRpb24oXG4gICAgbXR0OiBNb2R1bGVUeXBlVHJhbnNsYXRvciwgZXhwcjogdHMuRXhwcmVzc2lvbixcbiAgICBwcm9wOiB0cy5Qcm9wZXJ0eURlY2xhcmF0aW9ufHRzLlByb3BlcnR5U2lnbmF0dXJlfHRzLlBhcmFtZXRlckRlY2xhcmF0aW9uLFxuICAgIG9wdGlvbmFsOiBib29sZWFuKTogdHMuU3RhdGVtZW50IHtcbiAgY29uc3QgbmFtZSA9IHByb3BlcnR5TmFtZShwcm9wKTtcbiAgaWYgKCFuYW1lKSB7XG4gICAgbXR0LmRlYnVnV2Fybihwcm9wLCBgaGFuZGxlIHVubmFtZWQgbWVtYmVyOlxcbiR7ZXNjYXBlRm9yQ29tbWVudChwcm9wLmdldFRleHQoKSl9YCk7XG4gICAgcmV0dXJuIHRyYW5zZm9ybWVyVXRpbC5jcmVhdGVNdWx0aUxpbmVDb21tZW50KFxuICAgICAgICBwcm9wLCBgU2tpcHBpbmcgdW5uYW1lZCBtZW1iZXI6XFxuJHtlc2NhcGVGb3JDb21tZW50KHByb3AuZ2V0VGV4dCgpKX1gKTtcbiAgfVxuXG4gIGxldCB0eXBlID0gbXR0LnR5cGVUb0Nsb3N1cmUocHJvcCk7XG4gIC8vIFdoZW4gYSBwcm9wZXJ0eSBpcyBvcHRpb25hbCwgZS5nLlxuICAvLyAgIGZvbz86IHN0cmluZztcbiAgLy8gVGhlbiB0aGUgVHlwZVNjcmlwdCB0eXBlIG9mIHRoZSBwcm9wZXJ0eSBpcyBzdHJpbmd8dW5kZWZpbmVkLCB0aGVcbiAgLy8gdHlwZVRvQ2xvc3VyZSB0cmFuc2xhdGlvbiBoYW5kbGVzIGl0IGNvcnJlY3RseSwgYW5kIHN0cmluZ3x1bmRlZmluZWQgaXNcbiAgLy8gaG93IHlvdSB3cml0ZSBhbiBvcHRpb25hbCBwcm9wZXJ0eSBpbiBDbG9zdXJlLlxuICAvL1xuICAvLyBCdXQgaW4gdGhlIHNwZWNpYWwgY2FzZSBvZiBhbiBvcHRpb25hbCBwcm9wZXJ0eSB3aXRoIHR5cGUgYW55OlxuICAvLyAgIGZvbz86IGFueTtcbiAgLy8gVGhlIFR5cGVTY3JpcHQgdHlwZSBvZiB0aGUgcHJvcGVydHkgaXMganVzdCBcImFueVwiIChiZWNhdXNlIGFueSBpbmNsdWRlc1xuICAvLyB1bmRlZmluZWQgYXMgd2VsbCkgc28gb3VyIGRlZmF1bHQgdHJhbnNsYXRpb24gb2YgdGhlIHR5cGUgaXMganVzdCBcIj9cIi5cbiAgLy8gVG8gbWFyayB0aGUgcHJvcGVydHkgYXMgb3B0aW9uYWwgaW4gQ2xvc3VyZSBpdCBtdXN0IGhhdmUgXCJ8dW5kZWZpbmVkXCIsXG4gIC8vIHNvIHRoZSBDbG9zdXJlIHR5cGUgbXVzdCBiZSA/fHVuZGVmaW5lZC5cbiAgaWYgKG9wdGlvbmFsICYmIHR5cGUgPT09ICc/JykgdHlwZSArPSAnfHVuZGVmaW5lZCc7XG5cbiAgY29uc3QgdGFncyA9IG10dC5nZXRKU0RvYyhwcm9wLCAvKiByZXBvcnRXYXJuaW5ncyAqLyB0cnVlKTtcbiAgdGFncy5wdXNoKHt0YWdOYW1lOiAndHlwZScsIHR5cGV9KTtcbiAgY29uc3QgZmxhZ3MgPSB0cy5nZXRDb21iaW5lZE1vZGlmaWVyRmxhZ3MocHJvcCk7XG4gIGlmIChmbGFncyAmIHRzLk1vZGlmaWVyRmxhZ3MuUHJvdGVjdGVkKSB7XG4gICAgdGFncy5wdXNoKHt0YWdOYW1lOiAncHJvdGVjdGVkJ30pO1xuICB9IGVsc2UgaWYgKGZsYWdzICYgdHMuTW9kaWZpZXJGbGFncy5Qcml2YXRlKSB7XG4gICAgdGFncy5wdXNoKHt0YWdOYW1lOiAncHJpdmF0ZSd9KTtcbiAgfVxuICBpZiAoaGFzRXhwb3J0aW5nRGVjb3JhdG9yKHByb3AsIG10dC50eXBlQ2hlY2tlcikpIHtcbiAgICB0YWdzLnB1c2goe3RhZ05hbWU6ICdleHBvcnQnfSk7XG4gIH1cbiAgY29uc3QgZGVjbFN0bXQgPVxuICAgICAgdHMuc2V0U291cmNlTWFwUmFuZ2UodHMuY3JlYXRlU3RhdGVtZW50KHRzLmNyZWF0ZVByb3BlcnR5QWNjZXNzKGV4cHIsIG5hbWUpKSwgcHJvcCk7XG4gIC8vIEF2b2lkIHByaW50aW5nIGFubm90YXRpb25zIHRoYXQgY2FuIGNvbmZsaWN0IHdpdGggQHR5cGVcbiAgLy8gVGhpcyBhdm9pZHMgQ2xvc3VyZSdzIGVycm9yIFwidHlwZSBhbm5vdGF0aW9uIGluY29tcGF0aWJsZSB3aXRoIG90aGVyIGFubm90YXRpb25zXCJcbiAgYWRkQ29tbWVudE9uKGRlY2xTdG10LCB0YWdzLCBqc2RvYy5UQUdTX0NPTkZMSUNUSU5HX1dJVEhfVFlQRSk7XG4gIHJldHVybiBkZWNsU3RtdDtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFueSB0eXBlIGFzc2VydGlvbnMgYW5kIG5vbi1udWxsIGV4cHJlc3Npb25zIGZyb20gdGhlIEFTVCBiZWZvcmUgVHlwZVNjcmlwdCBwcm9jZXNzaW5nLlxuICpcbiAqIElkZWFsbHksIHRoZSBjb2RlIGluIGpzZG9jX3RyYW5zZm9ybWVyIGJlbG93IHNob3VsZCBqdXN0IHJlbW92ZSB0aGUgY2FzdCBleHByZXNzaW9uIGFuZFxuICogcmVwbGFjZSBpdCB3aXRoIHRoZSBDbG9zdXJlIGVxdWl2YWxlbnQuIEhvd2V2ZXIgQW5ndWxhcidzIGNvbXBpbGVyIGlzIGZyYWdpbGUgdG8gQVNUXG4gKiBub2RlcyBiZWluZyByZW1vdmVkIG9yIGNoYW5naW5nIHR5cGUsIHNvIHRoZSBjb2RlIG11c3QgcmV0YWluIHRoZSB0eXBlIGFzc2VydGlvblxuICogZXhwcmVzc2lvbiwgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8yNDg5NS5cbiAqXG4gKiB0c2lja2xlIGFsc28gY2Fubm90IGp1c3QgZ2VuZXJhdGUgYW5kIGtlZXAgYSBgKC8uLiBAdHlwZSB7U29tZVR5cGV9IC4vIChleHByIGFzIFNvbWVUeXBlKSlgXG4gKiBiZWNhdXNlIFR5cGVTY3JpcHQgcmVtb3ZlcyB0aGUgcGFyZW50aGVzaXplZCBleHByZXNzaW9ucyBpbiB0aGF0IHN5bnRheCwgKHJlYXNvbmFibHkpIGJlbGlldmluZ1xuICogdGhleSB3ZXJlIG9ubHkgYWRkZWQgZm9yIHRoZSBUUyBjYXN0LlxuICpcbiAqIFRoZSBmaW5hbCB3b3JrYXJvdW5kIGlzIHRoZW4gdG8ga2VlcCB0aGUgVHlwZVNjcmlwdCB0eXBlIGFzc2VydGlvbnMsIGFuZCBoYXZlIGEgcG9zdC1Bbmd1bGFyXG4gKiBwcm9jZXNzaW5nIHN0ZXAgdGhhdCByZW1vdmVzIHRoZSBhc3NlcnRpb25zIGJlZm9yZSBUeXBlU2NyaXB0IHNlZXMgdGhlbS5cbiAqXG4gKiBUT0RPKG1hcnRpbnByb2JzdCk6IHJlbW92ZSBvbmNlIHRoZSBBbmd1bGFyIGlzc3VlIGlzIGZpeGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlVHlwZUFzc2VydGlvbnMoKTogdHMuVHJhbnNmb3JtZXJGYWN0b3J5PHRzLlNvdXJjZUZpbGU+IHtcbiAgcmV0dXJuIChjb250ZXh0OiB0cy5UcmFuc2Zvcm1hdGlvbkNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpID0+IHtcbiAgICAgIGZ1bmN0aW9uIHZpc2l0b3Iobm9kZTogdHMuTm9kZSk6IHRzLk5vZGUge1xuICAgICAgICBzd2l0Y2ggKG5vZGUua2luZCkge1xuICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5UeXBlQXNzZXJ0aW9uRXhwcmVzc2lvbjpcbiAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuQXNFeHByZXNzaW9uOlxuICAgICAgICAgICAgcmV0dXJuIHRzLnZpc2l0Tm9kZSgobm9kZSBhcyB0cy5Bc3NlcnRpb25FeHByZXNzaW9uKS5leHByZXNzaW9uLCB2aXNpdG9yKTtcbiAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuTm9uTnVsbEV4cHJlc3Npb246XG4gICAgICAgICAgICByZXR1cm4gdHMudmlzaXROb2RlKChub2RlIGFzIHRzLk5vbk51bGxFeHByZXNzaW9uKS5leHByZXNzaW9uLCB2aXNpdG9yKTtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRzLnZpc2l0RWFjaENoaWxkKG5vZGUsIHZpc2l0b3IsIGNvbnRleHQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmlzaXRvcihzb3VyY2VGaWxlKSBhcyB0cy5Tb3VyY2VGaWxlO1xuICAgIH07XG4gIH07XG59XG5cbi8qKlxuICoganNkb2NUcmFuc2Zvcm1lciByZXR1cm5zIGEgdHJhbnNmb3JtZXIgZmFjdG9yeSB0aGF0IGNvbnZlcnRzIFR5cGVTY3JpcHQgdHlwZXMgaW50byB0aGUgZXF1aXZhbGVudFxuICogSlNEb2MgYW5ub3RhdGlvbnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBqc2RvY1RyYW5zZm9ybWVyKFxuICAgIGhvc3Q6IEFubm90YXRvckhvc3QsIHRzT3B0aW9uczogdHMuQ29tcGlsZXJPcHRpb25zLCB0eXBlQ2hlY2tlcjogdHMuVHlwZUNoZWNrZXIsXG4gICAgZGlhZ25vc3RpY3M6IHRzLkRpYWdub3N0aWNbXSwgdGhpc1R5cGVCeUFzeW5jRnVuY3Rpb246IE1hcDx0cy5GdW5jdGlvbkxpa2VEZWNsYXJhdGlvbiwgc3RyaW5nPik6XG4gICAgKGNvbnRleHQ6IHRzLlRyYW5zZm9ybWF0aW9uQ29udGV4dCkgPT4gdHMuVHJhbnNmb3JtZXI8dHMuU291cmNlRmlsZT4ge1xuICByZXR1cm4gKGNvbnRleHQ6IHRzLlRyYW5zZm9ybWF0aW9uQ29udGV4dCk6IHRzLlRyYW5zZm9ybWVyPHRzLlNvdXJjZUZpbGU+ID0+IHtcbiAgICByZXR1cm4gKHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUpID0+IHtcbiAgICAgIGNvbnN0IG1vZHVsZVR5cGVUcmFuc2xhdG9yID0gbmV3IE1vZHVsZVR5cGVUcmFuc2xhdG9yKFxuICAgICAgICAgIHNvdXJjZUZpbGUsIHR5cGVDaGVja2VyLCBob3N0LCBkaWFnbm9zdGljcywgLyppc0ZvckV4dGVybnMqLyBmYWxzZSk7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBzZXQgb2YgYWxsIG5hbWVzIGV4cG9ydGVkIGZyb20gYW4gZXhwb3J0ICogaW4gdGhlIGN1cnJlbnQgbW9kdWxlLiBVc2VkIHRvIHByZXZlbnRcbiAgICAgICAqIGVtaXR0aW5nIGR1cGxpY2F0ZWQgZXhwb3J0cy4gVGhlIGZpcnN0IGV4cG9ydCAqIHRha2VzIHByZWNlZGVuY2UgaW4gRVM2LlxuICAgICAgICovXG4gICAgICBjb25zdCBleHBhbmRlZFN0YXJJbXBvcnRzID0gbmV3IFNldDxzdHJpbmc+KCk7XG5cbiAgICAgIC8qKlxuICAgICAgICogV2hpbGUgQ2xvc3VyZSBjb21waWxlciBzdXBwb3J0cyBwYXJhbWV0ZXJpemVkIHR5cGVzLCBpbmNsdWRpbmcgcGFyYW1ldGVyaXplZCBgdGhpc2Agb25cbiAgICAgICAqIG1ldGhvZHMsIGl0IGRvZXMgbm90IHN1cHBvcnQgY29uc3RyYWludHMgb24gdGhlbS4gVGhhdCBtZWFucyB0aGF0IGFuIGBcXEB0ZW1wbGF0ZWBkIHR5cGUgaXNcbiAgICAgICAqIGFsd2F5cyBjb25zaWRlcmVkIHRvIGJlIGB1bmtub3duYCB3aXRoaW4gdGhlIG1ldGhvZCwgaW5jbHVkaW5nIGBUSElTYC5cbiAgICAgICAqXG4gICAgICAgKiBUbyBoZWxwIENsb3N1cmUgQ29tcGlsZXIsIHdlIGtlZXAgdHJhY2sgb2YgYW55IHRlbXBsYXRlZCB0aGlzIHJldHVybiB0eXBlLCBhbmQgc3Vic3RpdHV0ZVxuICAgICAgICogZXhwbGljaXQgY2FzdHMgdG8gdGhlIHRlbXBsYXRlZCB0eXBlLlxuICAgICAgICpcbiAgICAgICAqIFRoaXMgaXMgYW4gaW5jb21wbGV0ZSBzb2x1dGlvbiBhbmQgd29ya3MgYXJvdW5kIGEgc3BlY2lmaWMgcHJvYmxlbSB3aXRoIHdhcm5pbmdzIG9uIHVua25vd25cbiAgICAgICAqIHRoaXMgYWNjZXNzZXMuIE1vcmUgZ2VuZXJhbGx5LCBDbG9zdXJlIGFsc28gY2Fubm90IGluZmVyIGNvbnN0cmFpbnRzIGZvciBhbnkgb3RoZXJcbiAgICAgICAqIHRlbXBsYXRlZCB0eXBlcywgYnV0IHRoYXQgbWlnaHQgcmVxdWlyZSBhIG1vcmUgZ2VuZXJhbCBzb2x1dGlvbiBpbiBDbG9zdXJlIENvbXBpbGVyLlxuICAgICAgICovXG4gICAgICBsZXQgY29udGV4dFRoaXNUeXBlOiB0cy5UeXBlfG51bGwgPSBudWxsO1xuXG4gICAgICBmdW5jdGlvbiB2aXNpdENsYXNzRGVjbGFyYXRpb24oY2xhc3NEZWNsOiB0cy5DbGFzc0RlY2xhcmF0aW9uKTogdHMuU3RhdGVtZW50W10ge1xuICAgICAgICBjb25zdCBjb250ZXh0VGhpc1R5cGVCYWNrdXAgPSBjb250ZXh0VGhpc1R5cGU7XG5cbiAgICAgICAgY29uc3QgbWpzZG9jID0gbW9kdWxlVHlwZVRyYW5zbGF0b3IuZ2V0TXV0YWJsZUpTRG9jKGNsYXNzRGVjbCk7XG4gICAgICAgIGlmICh0cmFuc2Zvcm1lclV0aWwuaGFzTW9kaWZpZXJGbGFnKGNsYXNzRGVjbCwgdHMuTW9kaWZpZXJGbGFncy5BYnN0cmFjdCkpIHtcbiAgICAgICAgICBtanNkb2MudGFncy5wdXNoKHt0YWdOYW1lOiAnYWJzdHJhY3QnfSk7XG4gICAgICAgIH1cblxuICAgICAgICBtYXliZUFkZFRlbXBsYXRlQ2xhdXNlKG1qc2RvYy50YWdzLCBjbGFzc0RlY2wpO1xuICAgICAgICBpZiAoIWhvc3QudW50eXBlZCkge1xuICAgICAgICAgIG1heWJlQWRkSGVyaXRhZ2VDbGF1c2VzKG1qc2RvYy50YWdzLCBtb2R1bGVUeXBlVHJhbnNsYXRvciwgY2xhc3NEZWNsKTtcbiAgICAgICAgfVxuICAgICAgICBtanNkb2MudXBkYXRlQ29tbWVudCgpO1xuICAgICAgICBjb25zdCBkZWNsczogdHMuU3RhdGVtZW50W10gPSBbXTtcbiAgICAgICAgY29uc3QgbWVtYmVyRGVjbCA9IGNyZWF0ZU1lbWJlclR5cGVEZWNsYXJhdGlvbihtb2R1bGVUeXBlVHJhbnNsYXRvciwgY2xhc3NEZWNsKTtcbiAgICAgICAgLy8gV0FSTklORzogb3JkZXIgaXMgc2lnbmlmaWNhbnQ7IHdlIG11c3QgY3JlYXRlIHRoZSBtZW1iZXIgZGVjbCBiZWZvcmUgdHJhbnNmb3JtaW5nIGF3YXlcbiAgICAgICAgLy8gcGFyYW1ldGVyIHByb3BlcnR5IGNvbW1lbnRzIHdoZW4gdmlzaXRpbmcgdGhlIGNvbnN0cnVjdG9yLlxuICAgICAgICBkZWNscy5wdXNoKHRzLnZpc2l0RWFjaENoaWxkKGNsYXNzRGVjbCwgdmlzaXRvciwgY29udGV4dCkpO1xuICAgICAgICBpZiAobWVtYmVyRGVjbCkgZGVjbHMucHVzaChtZW1iZXJEZWNsKTtcbiAgICAgICAgY29udGV4dFRoaXNUeXBlID0gY29udGV4dFRoaXNUeXBlQmFja3VwO1xuICAgICAgICByZXR1cm4gZGVjbHM7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogdmlzaXRIZXJpdGFnZUNsYXVzZSB3b3JrcyBhcm91bmQgYSBDbG9zdXJlIENvbXBpbGVyIGlzc3VlLCB3aGVyZSB0aGUgZXhwcmVzc2lvbiBpbiBhblxuICAgICAgICogXCJleHRlbmRzXCIgY2xhdXNlIG11c3QgYmUgYSBzaW1wbGUgaWRlbnRpZmllciwgYW5kIGluIHBhcnRpY3VsYXIgbXVzdCBub3QgYmUgYSBwYXJlbnRoZXNpemVkXG4gICAgICAgKiBleHByZXNzaW9uLlxuICAgICAgICpcbiAgICAgICAqIFRoaXMgaXMgdHJpZ2dlcmVkIHdoZW4gVFMgY29kZSB3cml0ZXMgXCJjbGFzcyBYIGV4dGVuZHMgKEZvbyBhcyBCYXIpIHsgLi4uIH1cIiwgY29tbW9ubHkgZG9uZVxuICAgICAgICogdG8gc3VwcG9ydCBtaXhpbnMuIEZvciBleHRlbmRzIGNsYXVzZXMgaW4gY2xhc3NlcywgdGhlIGNvZGUgYmVsb3cgZHJvcHMgdGhlIGNhc3QgYW5kIGFueVxuICAgICAgICogcGFyZW50aGV0aWNhbHMsIGxlYXZpbmcganVzdCB0aGUgb3JpZ2luYWwgZXhwcmVzc2lvbi5cbiAgICAgICAqXG4gICAgICAgKiBUaGlzIGlzIGFuIGluY29tcGxldGUgd29ya2Fyb3VuZCwgYXMgQ2xvc3VyZSB3aWxsIHN0aWxsIGJhaWwgb24gb3RoZXIgc3VwZXIgZXhwcmVzc2lvbnMsXG4gICAgICAgKiBidXQgcmV0YWlucyBjb21wYXRpYmlsaXR5IHdpdGggdGhlIHByZXZpb3VzIGVtaXQgdGhhdCAoYWNjaWRlbnRhbGx5KSBkcm9wcGVkIHRoZSBjYXN0XG4gICAgICAgKiBleHByZXNzaW9uLlxuICAgICAgICpcbiAgICAgICAqIFRPRE8obWFydGlucHJvYnN0KTogcmVtb3ZlIHRoaXMgb25jZSB0aGUgQ2xvc3VyZSBzaWRlIGlzc3VlIGhhcyBiZWVuIHJlc29sdmVkLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiB2aXNpdEhlcml0YWdlQ2xhdXNlKGhlcml0YWdlQ2xhdXNlOiB0cy5IZXJpdGFnZUNsYXVzZSkge1xuICAgICAgICBpZiAoaGVyaXRhZ2VDbGF1c2UudG9rZW4gIT09IHRzLlN5bnRheEtpbmQuRXh0ZW5kc0tleXdvcmQgfHwgIWhlcml0YWdlQ2xhdXNlLnBhcmVudCB8fFxuICAgICAgICAgICAgaGVyaXRhZ2VDbGF1c2UucGFyZW50LmtpbmQgPT09IHRzLlN5bnRheEtpbmQuSW50ZXJmYWNlRGVjbGFyYXRpb24pIHtcbiAgICAgICAgICByZXR1cm4gdHMudmlzaXRFYWNoQ2hpbGQoaGVyaXRhZ2VDbGF1c2UsIHZpc2l0b3IsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoZXJpdGFnZUNsYXVzZS50eXBlcy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICBtb2R1bGVUeXBlVHJhbnNsYXRvci5lcnJvcihcbiAgICAgICAgICAgICAgaGVyaXRhZ2VDbGF1c2UsIGBleHBlY3RlZCBleGFjdGx5IG9uZSB0eXBlIGluIGNsYXNzIGV4dGVuc2lvbiBjbGF1c2VgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0eXBlID0gaGVyaXRhZ2VDbGF1c2UudHlwZXNbMF07XG4gICAgICAgIGxldCBleHByOiB0cy5FeHByZXNzaW9uID0gdHlwZS5leHByZXNzaW9uO1xuICAgICAgICB3aGlsZSAodHMuaXNQYXJlbnRoZXNpemVkRXhwcmVzc2lvbihleHByKSB8fCB0cy5pc05vbk51bGxFeHByZXNzaW9uKGV4cHIpIHx8XG4gICAgICAgICAgICAgICB0cy5pc0Fzc2VydGlvbkV4cHJlc3Npb24oZXhwcikpIHtcbiAgICAgICAgICBleHByID0gZXhwci5leHByZXNzaW9uO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cy51cGRhdGVIZXJpdGFnZUNsYXVzZShoZXJpdGFnZUNsYXVzZSwgW3RzLnVwZGF0ZUV4cHJlc3Npb25XaXRoVHlwZUFyZ3VtZW50cyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSwgdHlwZS50eXBlQXJndW1lbnRzIHx8IFtdLCBleHByKV0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB2aXNpdEludGVyZmFjZURlY2xhcmF0aW9uKGlmYWNlOiB0cy5JbnRlcmZhY2VEZWNsYXJhdGlvbik6IHRzLlN0YXRlbWVudFtdIHtcbiAgICAgICAgY29uc3Qgc3ltID0gdHlwZUNoZWNrZXIuZ2V0U3ltYm9sQXRMb2NhdGlvbihpZmFjZS5uYW1lKTtcbiAgICAgICAgaWYgKCFzeW0pIHtcbiAgICAgICAgICBtb2R1bGVUeXBlVHJhbnNsYXRvci5lcnJvcihpZmFjZSwgJ2ludGVyZmFjZSB3aXRoIG5vIHN5bWJvbCcpO1xuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGlzIHN5bWJvbCBpcyBib3RoIGEgdHlwZSBhbmQgYSB2YWx1ZSwgd2UgY2Fubm90IGVtaXQgYm90aCBpbnRvIENsb3N1cmUnc1xuICAgICAgICAvLyBzaW5nbGUgbmFtZXNwYWNlLlxuICAgICAgICBpZiAoc3ltYm9sSXNWYWx1ZSh0eXBlQ2hlY2tlciwgc3ltKSkge1xuICAgICAgICAgIG1vZHVsZVR5cGVUcmFuc2xhdG9yLmRlYnVnV2FybihcbiAgICAgICAgICAgICAgaWZhY2UsIGB0eXBlL3N5bWJvbCBjb25mbGljdCBmb3IgJHtzeW0ubmFtZX0sIHVzaW5nIHs/fSBmb3Igbm93YCk7XG4gICAgICAgICAgcmV0dXJuIFt0cmFuc2Zvcm1lclV0aWwuY3JlYXRlU2luZ2xlTGluZUNvbW1lbnQoXG4gICAgICAgICAgICAgIGlmYWNlLCAnV0FSTklORzogaW50ZXJmYWNlIGhhcyBib3RoIGEgdHlwZSBhbmQgYSB2YWx1ZSwgc2tpcHBpbmcgZW1pdCcpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHRhZ3MgPSBtb2R1bGVUeXBlVHJhbnNsYXRvci5nZXRKU0RvYyhpZmFjZSwgLyogcmVwb3J0V2FybmluZ3MgKi8gdHJ1ZSkgfHwgW107XG4gICAgICAgIHRhZ3MucHVzaCh7dGFnTmFtZTogJ3JlY29yZCd9KTtcbiAgICAgICAgbWF5YmVBZGRUZW1wbGF0ZUNsYXVzZSh0YWdzLCBpZmFjZSk7XG4gICAgICAgIGlmICghaG9zdC51bnR5cGVkKSB7XG4gICAgICAgICAgbWF5YmVBZGRIZXJpdGFnZUNsYXVzZXModGFncywgbW9kdWxlVHlwZVRyYW5zbGF0b3IsIGlmYWNlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuYW1lID0gdHJhbnNmb3JtZXJVdGlsLmdldElkZW50aWZpZXJUZXh0KGlmYWNlLm5hbWUpO1xuICAgICAgICBjb25zdCBtb2RpZmllcnMgPSB0cmFuc2Zvcm1lclV0aWwuaGFzTW9kaWZpZXJGbGFnKGlmYWNlLCB0cy5Nb2RpZmllckZsYWdzLkV4cG9ydCkgP1xuICAgICAgICAgICAgW3RzLmNyZWF0ZVRva2VuKHRzLlN5bnRheEtpbmQuRXhwb3J0S2V5d29yZCldIDpcbiAgICAgICAgICAgIHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgZGVjbCA9IHRzLnNldFNvdXJjZU1hcFJhbmdlKFxuICAgICAgICAgICAgdHMuY3JlYXRlRnVuY3Rpb25EZWNsYXJhdGlvbihcbiAgICAgICAgICAgICAgICAvKiBkZWNvcmF0b3JzICovIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBtb2RpZmllcnMsXG4gICAgICAgICAgICAgICAgLyogYXN0ZXJpc2sgKi8gdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgLyogdHlwZVBhcmFtZXRlcnMgKi8gdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIC8qIHBhcmFtZXRlcnMgKi9bXSxcbiAgICAgICAgICAgICAgICAvKiB0eXBlICovIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAvKiBib2R5ICovIHRzLmNyZWF0ZUJsb2NrKFtdKSxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgaWZhY2UpO1xuICAgICAgICBhZGRDb21tZW50T24oZGVjbCwgdGFncyk7XG4gICAgICAgIGNvbnN0IG1lbWJlckRlY2wgPSBjcmVhdGVNZW1iZXJUeXBlRGVjbGFyYXRpb24obW9kdWxlVHlwZVRyYW5zbGF0b3IsIGlmYWNlKTtcbiAgICAgICAgcmV0dXJuIG1lbWJlckRlY2wgPyBbZGVjbCwgbWVtYmVyRGVjbF0gOiBbZGVjbF07XG4gICAgICB9XG5cbiAgICAgIC8qKiBSZXR1cm5zIHRoZSBgdGhpc2AgdHlwZSBpbiB0aGlzIGNvbnRleHQsIG9yIHVuZGVmaW5lZCBpZiBub25lLiAqL1xuICAgICAgZnVuY3Rpb24gZ2V0Q29udGV4dFRoaXNUeXBlKG5vZGU6IHRzLk5vZGV8dW5kZWZpbmVkKTogdHMuVHlwZXx1bmRlZmluZWQge1xuICAgICAgICB3aGlsZSAobm9kZSkge1xuICAgICAgICAgIGlmICh0cy5pc0NsYXNzRGVjbGFyYXRpb24obm9kZSkgJiYgbm9kZS5uYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZUNoZWNrZXIuZ2V0VHlwZUF0TG9jYXRpb24obm9kZS5uYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRzLmlzRnVuY3Rpb25EZWNsYXJhdGlvbihub2RlKSAmJiBub2RlLnBhcmFtZXRlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgZmlyc3RQYXJhbSA9IG5vZGUucGFyYW1ldGVyc1swXTtcbiAgICAgICAgICAgIC8vIHRzLlNpZ25hdHVyZSBkb2VzIG5vdCBleHBvc2UgYSBgdGhpc2AgdHlwZSwgc28gY29tcGFyaW5nIGlkZW50aWZpZXIgbmFtZXMgdG8gJ3RoaXMnXG4gICAgICAgICAgICAvLyBpcyB0aGUgb25seSB3YXkgdG8gZmluZCBhIHRoaXMgdHlwZSBkZWNsYXJhdGlvbi5cbiAgICAgICAgICAgIGlmICh0cy5pc0lkZW50aWZpZXIoZmlyc3RQYXJhbS5uYW1lKSAmJlxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybWVyVXRpbC5nZXRJZGVudGlmaWVyVGV4dChmaXJzdFBhcmFtLm5hbWUpID09PSAndGhpcycgJiYgZmlyc3RQYXJhbS50eXBlKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0eXBlQ2hlY2tlci5nZXRUeXBlQXRMb2NhdGlvbihmaXJzdFBhcmFtLnR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgLyoqIEZ1bmN0aW9uIGRlY2xhcmF0aW9ucyBhcmUgZW1pdHRlZCBhcyB0aGV5IGFyZSwgd2l0aCBvbmx5IEpTRG9jIGFkZGVkLiAqL1xuICAgICAgZnVuY3Rpb24gdmlzaXRGdW5jdGlvbkxpa2VEZWNsYXJhdGlvbjxUIGV4dGVuZHMgdHMuRnVuY3Rpb25MaWtlRGVjbGFyYXRpb24+KGZuRGVjbDogVCk6IFQge1xuICAgICAgICBpZiAoIWZuRGVjbC5ib2R5KSB7XG4gICAgICAgICAgLy8gVHdvIGNhc2VzOiBhYnN0cmFjdCBtZXRob2RzIGFuZCBvdmVybG9hZGVkIG1ldGhvZHMvZnVuY3Rpb25zLlxuICAgICAgICAgIC8vIEFic3RyYWN0IG1ldGhvZHMgYXJlIGhhbmRsZWQgaW4gZW1pdFR5cGVBbm5vdGF0aW9uc0hhbmRsZXIuXG4gICAgICAgICAgLy8gT3ZlcmxvYWRzIGFyZSB1bmlvbi1pemVkIGludG8gdGhlIHNoYXJlZCB0eXBlIGluIEZ1bmN0aW9uVHlwZS5cbiAgICAgICAgICByZXR1cm4gdHMudmlzaXRFYWNoQ2hpbGQoZm5EZWNsLCB2aXNpdG9yLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBleHRyYVRhZ3MgPSBbXTtcbiAgICAgICAgaWYgKGhhc0V4cG9ydGluZ0RlY29yYXRvcihmbkRlY2wsIHR5cGVDaGVja2VyKSkgZXh0cmFUYWdzLnB1c2goe3RhZ05hbWU6ICdleHBvcnQnfSk7XG5cbiAgICAgICAgY29uc3Qge3RhZ3MsIHRoaXNSZXR1cm5UeXBlfSA9XG4gICAgICAgICAgICBtb2R1bGVUeXBlVHJhbnNsYXRvci5nZXRGdW5jdGlvblR5cGVKU0RvYyhbZm5EZWNsXSwgZXh0cmFUYWdzKTtcblxuICAgICAgICBpZiAodHJhbnNmb3JtZXJVdGlsLmhhc01vZGlmaWVyRmxhZyhmbkRlY2wsIHRzLk1vZGlmaWVyRmxhZ3MuQXN5bmMpKSB7XG4gICAgICAgICAgLy8gU3RvcmUgdGhlIHRoaXMgdHlwZSBmb3IgYXN5bmMgZnVuY3Rpb25zLCBzbyB0aGF0IGl0IGNhbiBiZSBhZGRlZCBsYXRlciBvbiB0aGUgcmVzdWx0IG9mXG4gICAgICAgICAgLy8gVHlwZVNjcmlwdCdzIGF3YWl0IGRvd24tbGV2ZWxsaW5nLiBTZWUgYXdhaXRfdHJhbnNmb3JtZXIudHMuXG4gICAgICAgICAgY29uc3QgdGhpc1R5cGUgPSBnZXRDb250ZXh0VGhpc1R5cGUodHMuZ2V0T3JpZ2luYWxOb2RlKGZuRGVjbCkpO1xuICAgICAgICAgIGlmICh0aGlzVHlwZSkge1xuICAgICAgICAgICAgY29uc3QgdGhpc1R5cGVTdHJpbmcgPVxuICAgICAgICAgICAgICAgIG1vZHVsZVR5cGVUcmFuc2xhdG9yLm5ld1R5cGVUcmFuc2xhdG9yKGZuRGVjbCkudHJhbnNsYXRlKHRoaXNUeXBlKTtcbiAgICAgICAgICAgIHRoaXNUeXBlQnlBc3luY0Z1bmN0aW9uLnNldChmbkRlY2wsIHRoaXNUeXBlU3RyaW5nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0b3AtbGV2ZWwgYXN5bmMgZnVuY3Rpb25zIHdoZW4gZG93bi1sZXZlbGVkIGFjY2VzcyBgdGhpc2AgdG8gcGFzcyBpdCB0b1xuICAgICAgICAvLyB0c2xpYi5fX2F3YWl0ZXIuIENsb3N1cmUgcmVxdWlyZXMgYSBAdGhpcyB0YWcgZm9yIHRoYXQuXG4gICAgICAgIGlmICgodHNPcHRpb25zLnRhcmdldCAhPT0gdW5kZWZpbmVkICYmIHRzT3B0aW9ucy50YXJnZXQgPD0gdHMuU2NyaXB0VGFyZ2V0LkVTMjAxNSkgJiZcbiAgICAgICAgICAgIHRyYW5zZm9ybWVyVXRpbC5oYXNNb2RpZmllckZsYWcoZm5EZWNsLCB0cy5Nb2RpZmllckZsYWdzLkFzeW5jKSAmJlxuICAgICAgICAgICAgLy8gTWV0aG9kcy9nZXR0ZXJzL3NldHRlcnMvY3RvcnMgYWxyZWFkeSBoYXZlIGFuIGltcGxpY2l0IHRoaXMuXG4gICAgICAgICAgICBmbkRlY2wua2luZCA9PT0gdHMuU3ludGF4S2luZC5GdW5jdGlvbkRlY2xhcmF0aW9uICYmXG4gICAgICAgICAgICAvLyBUaGVyZSBtaWdodCBiZSBhbiBleHBsaWNpdCBgdGhpczogVGAgdHlwZS5cbiAgICAgICAgICAgICF0YWdzLnNvbWUodCA9PiB0LnRhZ05hbWUgPT09ICd0aGlzJykpIHtcbiAgICAgICAgICB0YWdzLnB1c2goe3RhZ05hbWU6ICd0aGlzJywgdHlwZTogJyonfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWpzZG9jID0gbW9kdWxlVHlwZVRyYW5zbGF0b3IuZ2V0TXV0YWJsZUpTRG9jKGZuRGVjbCk7XG4gICAgICAgIG1qc2RvYy50YWdzID0gdGFncztcbiAgICAgICAgbWpzZG9jLnVwZGF0ZUNvbW1lbnQoKTtcblxuICAgICAgICBjb25zdCBjb250ZXh0VGhpc1R5cGVCYWNrdXAgPSBjb250ZXh0VGhpc1R5cGU7XG4gICAgICAgIC8vIEFycm93IGZ1bmN0aW9ucyByZXRhaW4gdGhlaXIgY29udGV4dCBgdGhpc2AgdHlwZS4gQWxsIG90aGVycyByZXNldCB0aGUgdGhpcyB0eXBlIHRvXG4gICAgICAgIC8vIGVpdGhlciBub25lIChpZiBub3Qgc3BlY2lmaWVkKSBvciB0aGUgdHlwZSBnaXZlbiBpbiBhIGZuKHRoaXM6IFQsIC4uLikgZGVjbGFyYXRpb24uXG4gICAgICAgIGlmICghdHMuaXNBcnJvd0Z1bmN0aW9uKGZuRGVjbCkpIGNvbnRleHRUaGlzVHlwZSA9IHRoaXNSZXR1cm5UeXBlO1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0cy52aXNpdEVhY2hDaGlsZChmbkRlY2wsIHZpc2l0b3IsIGNvbnRleHQpO1xuICAgICAgICBjb250ZXh0VGhpc1R5cGUgPSBjb250ZXh0VGhpc1R5cGVCYWNrdXA7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogSW4gbWV0aG9kcyB3aXRoIGEgdGVtcGxhdGVkIHRoaXMgdHlwZSwgYWRkcyBleHBsaWNpdCBjYXN0cyB0byBhY2Nlc3NlcyBvbiB0aGlzLlxuICAgICAgICpcbiAgICAgICAqIEBzZWUgY29udGV4dFRoaXNUeXBlXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIHZpc2l0VGhpc0V4cHJlc3Npb24obm9kZTogdHMuVGhpc0V4cHJlc3Npb24pIHtcbiAgICAgICAgaWYgKCFjb250ZXh0VGhpc1R5cGUpIHJldHVybiB0cy52aXNpdEVhY2hDaGlsZChub2RlLCB2aXNpdG9yLCBjb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNsb3N1cmVDYXN0KG5vZGUsIG5vZGUsIGNvbnRleHRUaGlzVHlwZSk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogdmlzaXRWYXJpYWJsZVN0YXRlbWVudCBmbGF0dGVucyB2YXJpYWJsZSBkZWNsYXJhdGlvbiBsaXN0cyAoYHZhciBhLCBiO2AgdG8gYHZhciBhOyB2YXJcbiAgICAgICAqIGI7YCksIGFuZCBhdHRhY2hlcyBKU0RvYyBjb21tZW50cyB0byBlYWNoIHZhcmlhYmxlLiBKU0RvYyBjb21tZW50cyBwcmVjZWRpbmcgdGhlXG4gICAgICAgKiBvcmlnaW5hbCB2YXJpYWJsZSBhcmUgYXR0YWNoZWQgdG8gdGhlIGZpcnN0IG5ld2x5IGNyZWF0ZWQgb25lLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiB2aXNpdFZhcmlhYmxlU3RhdGVtZW50KHZhclN0bXQ6IHRzLlZhcmlhYmxlU3RhdGVtZW50KTogdHMuU3RhdGVtZW50W10ge1xuICAgICAgICBjb25zdCBzdG10czogdHMuU3RhdGVtZW50W10gPSBbXTtcblxuICAgICAgICAvLyBcImNvbnN0XCIsIFwibGV0XCIsIGV0YyBhcmUgc3RvcmVkIGluIG5vZGUgZmxhZ3Mgb24gdGhlIGRlY2xhcmF0aW9uTGlzdC5cbiAgICAgICAgY29uc3QgZmxhZ3MgPSB0cy5nZXRDb21iaW5lZE5vZGVGbGFncyh2YXJTdG10LmRlY2xhcmF0aW9uTGlzdCk7XG5cbiAgICAgICAgbGV0IHRhZ3M6IGpzZG9jLlRhZ1tdfG51bGwgPVxuICAgICAgICAgICAgbW9kdWxlVHlwZVRyYW5zbGF0b3IuZ2V0SlNEb2ModmFyU3RtdCwgLyogcmVwb3J0V2FybmluZ3MgKi8gdHJ1ZSk7XG4gICAgICAgIGNvbnN0IGxlYWRpbmcgPSB0cy5nZXRTeW50aGV0aWNMZWFkaW5nQ29tbWVudHModmFyU3RtdCk7XG4gICAgICAgIGlmIChsZWFkaW5nKSB7XG4gICAgICAgICAgLy8gQXR0YWNoIG5vbi1KU0RvYyBjb21tZW50cyB0byBhIG5vdCBlbWl0dGVkIHN0YXRlbWVudC5cbiAgICAgICAgICBjb25zdCBjb21tZW50SG9sZGVyID0gdHMuY3JlYXRlTm90RW1pdHRlZFN0YXRlbWVudCh2YXJTdG10KTtcbiAgICAgICAgICB0cy5zZXRTeW50aGV0aWNMZWFkaW5nQ29tbWVudHMoY29tbWVudEhvbGRlciwgbGVhZGluZy5maWx0ZXIoYyA9PiBjLnRleHRbMF0gIT09ICcqJykpO1xuICAgICAgICAgIHN0bXRzLnB1c2goY29tbWVudEhvbGRlcik7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkZWNsTGlzdCA9IHRzLnZpc2l0Tm9kZSh2YXJTdG10LmRlY2xhcmF0aW9uTGlzdCwgdmlzaXRvcik7XG4gICAgICAgIGZvciAoY29uc3QgZGVjbCBvZiBkZWNsTGlzdC5kZWNsYXJhdGlvbnMpIHtcbiAgICAgICAgICBjb25zdCBsb2NhbFRhZ3M6IGpzZG9jLlRhZ1tdID0gW107XG4gICAgICAgICAgaWYgKHRhZ3MpIHtcbiAgICAgICAgICAgIC8vIEFkZCBhbnkgdGFncyBhbmQgZG9jcyBwcmVjZWRpbmcgdGhlIGVudGlyZSBzdGF0ZW1lbnQgdG8gdGhlIGZpcnN0IHZhcmlhYmxlLlxuICAgICAgICAgICAgbG9jYWxUYWdzLnB1c2goLi4udGFncyk7XG4gICAgICAgICAgICB0YWdzID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gQWRkIGFuIEB0eXBlIGZvciBwbGFpbiBpZGVudGlmaWVycywgYnV0IG5vdCBmb3IgYmluZGluZ3MgcGF0dGVybnMgKGkuZS4gb2JqZWN0IG9yIGFycmF5XG4gICAgICAgICAgLy8gZGVzdHJ1Y3R1cmluZyAtIHRob3NlIGRvIG5vdCBoYXZlIGEgc3ludGF4IGluIENsb3N1cmUpIG9yIEBkZWZpbmVzLCB3aGljaCBhbHJlYWR5XG4gICAgICAgICAgLy8gZGVjbGFyZSB0aGVpciB0eXBlLlxuICAgICAgICAgIGlmICh0cy5pc0lkZW50aWZpZXIoZGVjbC5uYW1lKSkge1xuICAgICAgICAgICAgLy8gRm9yIHZhcmlhYmxlcyB0aGF0IGFyZSBpbml0aWFsaXplZCBhbmQgdXNlIGEgYmxhY2tsaXN0ZWQgdHlwZSwgZG8gbm90IGVtaXQgYSB0eXBlIGF0XG4gICAgICAgICAgICAvLyBhbGwuIENsb3N1cmUgQ29tcGlsZXIgbWlnaHQgYmUgYWJsZSB0byBpbmZlciBhIGJldHRlciB0eXBlIGZyb20gdGhlIGluaXRpYWxpemVyIHRoYW5cbiAgICAgICAgICAgIC8vIHRoZSBgP2AgdGhlIGNvZGUgYmVsb3cgd291bGQgZW1pdC5cbiAgICAgICAgICAgIC8vIFRPRE8obWFydGlucHJvYnN0KTogY29uc2lkZXIgZG9pbmcgdGhpcyBmb3IgYWxsIHR5cGVzIHRoYXQgZ2V0IGVtaXR0ZWQgYXMgPywgbm90IGp1c3RcbiAgICAgICAgICAgIC8vIGZvciBibGFja2xpc3RlZCBvbmVzLlxuICAgICAgICAgICAgY29uc3QgYmxhY2tMaXN0ZWRJbml0aWFsaXplZCA9XG4gICAgICAgICAgICAgICAgISFkZWNsLmluaXRpYWxpemVyICYmIG1vZHVsZVR5cGVUcmFuc2xhdG9yLmlzQmxhY2tMaXN0ZWQoZGVjbCk7XG4gICAgICAgICAgICBpZiAoIWJsYWNrTGlzdGVkSW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgICAgLy8gZ2V0T3JpZ2luYWxOb2RlKGRlY2wpIGlzIHJlcXVpcmVkIGJlY2F1c2UgdGhlIHR5cGUgY2hlY2tlciBjYW5ub3QgdHlwZSBjaGVja1xuICAgICAgICAgICAgICAvLyBzeW50aGVzaXplZCBub2Rlcy5cbiAgICAgICAgICAgICAgY29uc3QgdHlwZVN0ciA9IG1vZHVsZVR5cGVUcmFuc2xhdG9yLnR5cGVUb0Nsb3N1cmUodHMuZ2V0T3JpZ2luYWxOb2RlKGRlY2wpKTtcbiAgICAgICAgICAgICAgLy8gSWYgQGRlZmluZSBpcyBwcmVzZW50IHRoZW4gYWRkIHRoZSB0eXBlIHRvIGl0LCByYXRoZXIgdGhhbiBhZGRpbmcgYSBub3JtYWwgQHR5cGUuXG4gICAgICAgICAgICAgIGNvbnN0IGRlZmluZVRhZyA9IGxvY2FsVGFncy5maW5kKCh7dGFnTmFtZX0pID0+IHRhZ05hbWUgPT09ICdkZWZpbmUnKTtcbiAgICAgICAgICAgICAgaWYgKGRlZmluZVRhZykge1xuICAgICAgICAgICAgICAgIGRlZmluZVRhZy50eXBlID0gdHlwZVN0cjtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsb2NhbFRhZ3MucHVzaCh7dGFnTmFtZTogJ3R5cGUnLCB0eXBlOiB0eXBlU3RyfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgbmV3U3RtdCA9IHRzLmNyZWF0ZVZhcmlhYmxlU3RhdGVtZW50KFxuICAgICAgICAgICAgICB2YXJTdG10Lm1vZGlmaWVycywgdHMuY3JlYXRlVmFyaWFibGVEZWNsYXJhdGlvbkxpc3QoW2RlY2xdLCBmbGFncykpO1xuICAgICAgICAgIGlmIChsb2NhbFRhZ3MubGVuZ3RoKSBhZGRDb21tZW50T24obmV3U3RtdCwgbG9jYWxUYWdzLCBqc2RvYy5UQUdTX0NPTkZMSUNUSU5HX1dJVEhfVFlQRSk7XG4gICAgICAgICAgc3RtdHMucHVzaChuZXdTdG10KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdG10cztcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBzaG91bGRFbWl0RXhwb3J0c0Fzc2lnbm1lbnRzIHJldHVybnMgdHJ1ZSBpZiB0c2lja2xlIHNob3VsZCBlbWl0IGBleHBvcnRzLkZvbyA9IC4uLmAgc3R5bGVcbiAgICAgICAqIGV4cG9ydCBzdGF0ZW1lbnRzLlxuICAgICAgICpcbiAgICAgICAqIFR5cGVTY3JpcHQgbW9kdWxlcyBjYW4gZXhwb3J0IHR5cGVzLiBCZWNhdXNlIHR5cGVzIGFyZSBwdXJlIGRlc2lnbi10aW1lIGNvbnN0cnVjdHMgaW5cbiAgICAgICAqIFR5cGVTY3JpcHQsIGl0IGRvZXMgbm90IGVtaXQgYW55IGFjdHVhbCBleHBvcnRlZCBzeW1ib2xzIGZvciB0aGVzZS4gQnV0IHRzaWNrbGUgaGFzIHRvIGVtaXRcbiAgICAgICAqIGFuIGV4cG9ydCwgc28gdGhhdCBkb3duc3RyZWFtIENsb3N1cmUgY29kZSAoaW5jbHVkaW5nIHRzaWNrbGUtY29udmVydGVkIENsb3N1cmUgY29kZSkgY2FuXG4gICAgICAgKiBpbXBvcnQgdXBzdHJlYW0gdHlwZXMuIHRzaWNrbGUgaGFzIHRvIHBpY2sgYSBtb2R1bGUgZm9ybWF0IGZvciB0aGF0LCBiZWNhdXNlIHRoZSBwdXJlIEVTNlxuICAgICAgICogZXhwb3J0IHdvdWxkIGdldCBzdHJpcHBlZCBieSBUeXBlU2NyaXB0LlxuICAgICAgICpcbiAgICAgICAqIHRzaWNrbGUgdXNlcyBDb21tb25KUyB0byBlbWl0IGdvb2dtb2R1bGUsIGFuZCBjb2RlIG5vdCB1c2luZyBnb29nbW9kdWxlIGRvZXNuJ3QgY2FyZSBhYm91dFxuICAgICAgICogdGhlIENsb3N1cmUgYW5ub3RhdGlvbnMgYW55d2F5LCBzbyB0c2lja2xlIHNraXBzIGVtaXR0aW5nIGV4cG9ydHMgaWYgdGhlIG1vZHVsZSB0YXJnZXRcbiAgICAgICAqIGlzbid0IGNvbW1vbmpzLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBzaG91bGRFbWl0RXhwb3J0c0Fzc2lnbm1lbnRzKCkge1xuICAgICAgICByZXR1cm4gdHNPcHRpb25zLm1vZHVsZSA9PT0gdHMuTW9kdWxlS2luZC5Db21tb25KUztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdmlzaXRUeXBlQWxpYXNEZWNsYXJhdGlvbih0eXBlQWxpYXM6IHRzLlR5cGVBbGlhc0RlY2xhcmF0aW9uKTogdHMuU3RhdGVtZW50W10ge1xuICAgICAgICBjb25zdCBzeW0gPSBtb2R1bGVUeXBlVHJhbnNsYXRvci5tdXN0R2V0U3ltYm9sQXRMb2NhdGlvbih0eXBlQWxpYXMubmFtZSk7XG4gICAgICAgIC8vIElmIHRoZSB0eXBlIGlzIGFsc28gZGVmaW5lZCBhcyBhIHZhbHVlLCBza2lwIGVtaXR0aW5nIGl0LiBDbG9zdXJlIGNvbGxhcHNlcyB0eXBlICYgdmFsdWVcbiAgICAgICAgLy8gbmFtZXNwYWNlcywgdGhlIHR3byBlbWl0cyB3b3VsZCBjb25mbGljdCBpZiB0c2lja2xlIGVtaXR0ZWQgYm90aC5cbiAgICAgICAgaWYgKHN5bWJvbElzVmFsdWUodHlwZUNoZWNrZXIsIHN5bSkpIHJldHVybiBbXTtcbiAgICAgICAgaWYgKCFzaG91bGRFbWl0RXhwb3J0c0Fzc2lnbm1lbnRzKCkpIHJldHVybiBbXTtcblxuICAgICAgICBjb25zdCB0eXBlTmFtZSA9IHR5cGVBbGlhcy5uYW1lLmdldFRleHQoKTtcblxuICAgICAgICAvLyBCbGFja2xpc3QgYW55IHR5cGUgcGFyYW1ldGVycywgQ2xvc3VyZSBkb2VzIG5vdCBzdXBwb3J0IHR5cGUgYWxpYXNlcyB3aXRoIHR5cGVcbiAgICAgICAgLy8gcGFyYW1ldGVycy5cbiAgICAgICAgbW9kdWxlVHlwZVRyYW5zbGF0b3IubmV3VHlwZVRyYW5zbGF0b3IodHlwZUFsaWFzKS5ibGFja2xpc3RUeXBlUGFyYW1ldGVycyhcbiAgICAgICAgICAgIG1vZHVsZVR5cGVUcmFuc2xhdG9yLnN5bWJvbHNUb0FsaWFzZWROYW1lcywgdHlwZUFsaWFzLnR5cGVQYXJhbWV0ZXJzKTtcbiAgICAgICAgY29uc3QgdHlwZVN0ciA9XG4gICAgICAgICAgICBob3N0LnVudHlwZWQgPyAnPycgOiBtb2R1bGVUeXBlVHJhbnNsYXRvci50eXBlVG9DbG9zdXJlKHR5cGVBbGlhcywgdW5kZWZpbmVkKTtcblxuICAgICAgICAvLyBXZSB3YW50IHRvIGVtaXQgYSBAdHlwZWRlZi4gIFRoZXkgYXJlIGEgYml0IHdlaXJkIGJlY2F1c2UgdGhleSBhcmUgJ3Zhcicgc3RhdGVtZW50c1xuICAgICAgICAvLyB0aGF0IGhhdmUgbm8gdmFsdWUuXG4gICAgICAgIGNvbnN0IHRhZ3MgPSBtb2R1bGVUeXBlVHJhbnNsYXRvci5nZXRKU0RvYyh0eXBlQWxpYXMsIC8qIHJlcG9ydFdhcm5pbmdzICovIHRydWUpO1xuICAgICAgICB0YWdzLnB1c2goe3RhZ05hbWU6ICd0eXBlZGVmJywgdHlwZTogdHlwZVN0cn0pO1xuICAgICAgICBjb25zdCBpc0V4cG9ydGVkID0gdHJhbnNmb3JtZXJVdGlsLmhhc01vZGlmaWVyRmxhZyh0eXBlQWxpYXMsIHRzLk1vZGlmaWVyRmxhZ3MuRXhwb3J0KTtcbiAgICAgICAgbGV0IGRlY2w6IHRzLlN0YXRlbWVudDtcbiAgICAgICAgaWYgKGlzRXhwb3J0ZWQpIHtcbiAgICAgICAgICAvLyBHaXZlbjogZXhwb3J0IHR5cGUgVCA9IC4uLjtcbiAgICAgICAgICAvLyBXZSBjYW5ub3QgZW1pdCBgZXhwb3J0IHZhciBmb287YCBhbmQgbGV0IFRTIGdlbmVyYXRlIGZyb20gdGhlcmUgYmVjYXVzZSBUeXBlU2NyaXB0XG4gICAgICAgICAgLy8gZHJvcHMgZXhwb3J0cyB0aGF0IGFyZSBuZXZlciBhc3NpZ25lZCB2YWx1ZXMsIGFuZCBDbG9zdXJlIHJlcXVpcmVzIHVzIHRvIG5vdCBhc3NpZ25cbiAgICAgICAgICAvLyB2YWx1ZXMgdG8gdHlwZWRlZiBleHBvcnRzLiBJbnRyb2R1Y2luZyBhIG5ldyBsb2NhbCB2YXJpYWJsZSBhbmQgZXhwb3J0aW5nIGl0IGNhbiBjYXVzZVxuICAgICAgICAgIC8vIGJ1Z3MgZHVlIHRvIG5hbWUgc2hhZG93aW5nIGFuZCBjb25mdXNpbmcgVHlwZVNjcmlwdCdzIGxvZ2ljIG9uIHdoYXQgc3ltYm9scyBhbmQgdHlwZXNcbiAgICAgICAgICAvLyB2cyB2YWx1ZXMgYXJlIGV4cG9ydGVkLiBNYW5nbGluZyB0aGUgbmFtZSB0byBhdm9pZCB0aGUgY29uZmxpY3RzIHdvdWxkIGJlIHJlYXNvbmFibHlcbiAgICAgICAgICAvLyBjbGVhbiwgYnV0IHdvdWxkIHJlcXVpcmUgYSB0d28gcGFzcyBlbWl0IHRvIGZpcnN0IGZpbmQgYWxsIHR5cGUgYWxpYXMgbmFtZXMsIG1hbmdsZVxuICAgICAgICAgIC8vIHRoZW0sIGFuZCBlbWl0IHRoZSB1c2Ugc2l0ZXMgb25seSBsYXRlci5cbiAgICAgICAgICAvLyBTbyB3ZSBwcm9kdWNlOiBleHBvcnRzLlQ7XG4gICAgICAgICAgZGVjbCA9IHRzLmNyZWF0ZVN0YXRlbWVudCh0cy5jcmVhdGVQcm9wZXJ0eUFjY2VzcyhcbiAgICAgICAgICAgICAgdHMuY3JlYXRlSWRlbnRpZmllcignZXhwb3J0cycpLCB0cy5jcmVhdGVJZGVudGlmaWVyKHR5cGVOYW1lKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEdpdmVuOiB0eXBlIFQgPSAuLi47XG4gICAgICAgICAgLy8gV2UgcHJvZHVjZTogdmFyIFQ7XG4gICAgICAgICAgLy8gTm90ZTogbm90IGNvbnN0LCBiZWNhdXNlICdjb25zdCBGb287JyBpcyBpbGxlZ2FsO1xuICAgICAgICAgIC8vIG5vdCBsZXQsIGJlY2F1c2Ugd2Ugd2FudCBob2lzdGluZyBiZWhhdmlvciBmb3IgdHlwZXMuXG4gICAgICAgICAgZGVjbCA9IHRzLmNyZWF0ZVZhcmlhYmxlU3RhdGVtZW50KFxuICAgICAgICAgICAgICAvKiBtb2RpZmllcnMgKi8gdW5kZWZpbmVkLFxuICAgICAgICAgICAgICB0cy5jcmVhdGVWYXJpYWJsZURlY2xhcmF0aW9uTGlzdChcbiAgICAgICAgICAgICAgICAgIFt0cy5jcmVhdGVWYXJpYWJsZURlY2xhcmF0aW9uKHRzLmNyZWF0ZUlkZW50aWZpZXIodHlwZU5hbWUpKV0pKTtcbiAgICAgICAgfVxuICAgICAgICBkZWNsID0gdHMuc2V0U291cmNlTWFwUmFuZ2UoZGVjbCwgdHlwZUFsaWFzKTtcbiAgICAgICAgYWRkQ29tbWVudE9uKGRlY2wsIHRhZ3MsIGpzZG9jLlRBR1NfQ09ORkxJQ1RJTkdfV0lUSF9UWVBFKTtcbiAgICAgICAgcmV0dXJuIFtkZWNsXTtcbiAgICAgIH1cblxuICAgICAgLyoqIEVtaXRzIGEgcGFyZW50aGVzaXplZCBDbG9zdXJlIGNhc3Q6IGAoLyoqIFxcQHR5cGUgLi4uICogLyAoZXhwcikpYC4gKi9cbiAgICAgIGZ1bmN0aW9uIGNyZWF0ZUNsb3N1cmVDYXN0KGNvbnRleHQ6IHRzLk5vZGUsIGV4cHJlc3Npb246IHRzLkV4cHJlc3Npb24sIHR5cGU6IHRzLlR5cGUpIHtcbiAgICAgICAgY29uc3QgaW5uZXIgPSB0cy5jcmVhdGVQYXJlbihleHByZXNzaW9uKTtcbiAgICAgICAgY29uc3QgY29tbWVudCA9IGFkZENvbW1lbnRPbihcbiAgICAgICAgICAgIGlubmVyLCBbe3RhZ05hbWU6ICd0eXBlJywgdHlwZTogbW9kdWxlVHlwZVRyYW5zbGF0b3IudHlwZVRvQ2xvc3VyZShjb250ZXh0LCB0eXBlKX1dKTtcbiAgICAgICAgY29tbWVudC5oYXNUcmFpbGluZ05ld0xpbmUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRzLnNldFNvdXJjZU1hcFJhbmdlKHRzLmNyZWF0ZVBhcmVuKGlubmVyKSwgY29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIC8qKiBDb252ZXJ0cyBhIFR5cGVTY3JpcHQgdHlwZSBhc3NlcnRpb24gaW50byBhIENsb3N1cmUgQ2FzdC4gKi9cbiAgICAgIGZ1bmN0aW9uIHZpc2l0QXNzZXJ0aW9uRXhwcmVzc2lvbihhc3NlcnRpb246IHRzLkFzc2VydGlvbkV4cHJlc3Npb24pIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IHR5cGVDaGVja2VyLmdldFR5cGVBdExvY2F0aW9uKGFzc2VydGlvbi50eXBlKTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNsb3N1cmVDYXN0KGFzc2VydGlvbiwgdHMudmlzaXRFYWNoQ2hpbGQoYXNzZXJ0aW9uLCB2aXNpdG9yLCBjb250ZXh0KSwgdHlwZSk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ29udmVydHMgYSBUeXBlU2NyaXB0IG5vbi1udWxsIGFzc2VydGlvbiBpbnRvIGEgQ2xvc3VyZSBDYXN0LCBieSBzdHJpcHBpbmcgfG51bGwgYW5kXG4gICAgICAgKiB8dW5kZWZpbmVkIGZyb20gYSB1bmlvbiB0eXBlLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiB2aXNpdE5vbk51bGxFeHByZXNzaW9uKG5vbk51bGw6IHRzLk5vbk51bGxFeHByZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSB0eXBlQ2hlY2tlci5nZXRUeXBlQXRMb2NhdGlvbihub25OdWxsLmV4cHJlc3Npb24pO1xuICAgICAgICBjb25zdCBub25OdWxsVHlwZSA9IHR5cGVDaGVja2VyLmdldE5vbk51bGxhYmxlVHlwZSh0eXBlKTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNsb3N1cmVDYXN0KFxuICAgICAgICAgICAgbm9uTnVsbCwgdHMudmlzaXRFYWNoQ2hpbGQobm9uTnVsbCwgdmlzaXRvciwgY29udGV4dCksIG5vbk51bGxUeXBlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdmlzaXRJbXBvcnREZWNsYXJhdGlvbihpbXBvcnREZWNsOiB0cy5JbXBvcnREZWNsYXJhdGlvbikge1xuICAgICAgICAvLyBGb3IgZWFjaCBpbXBvcnQsIGluc2VydCBhIGdvb2cucmVxdWlyZVR5cGUgZm9yIHRoZSBtb2R1bGUsIHNvIHRoYXQgaWYgVHlwZVNjcmlwdCBkb2VzIG5vdFxuICAgICAgICAvLyBlbWl0IHRoZSBtb2R1bGUgYmVjYXVzZSBpdCdzIG9ubHkgdXNlZCBpbiB0eXBlIHBvc2l0aW9ucywgdGhlIEpTRG9jIGNvbW1lbnRzIHN0aWxsXG4gICAgICAgIC8vIHJlZmVyZW5jZSBhIHZhbGlkIENsb3N1cmUgbGV2ZWwgc3ltYm9sLlxuXG4gICAgICAgIC8vIE5vIG5lZWQgdG8gcmVxdWlyZVR5cGUgc2lkZSBlZmZlY3QgaW1wb3J0cy5cbiAgICAgICAgaWYgKCFpbXBvcnREZWNsLmltcG9ydENsYXVzZSkgcmV0dXJuIGltcG9ydERlY2w7XG5cbiAgICAgICAgY29uc3Qgc3ltID0gdHlwZUNoZWNrZXIuZ2V0U3ltYm9sQXRMb2NhdGlvbihpbXBvcnREZWNsLm1vZHVsZVNwZWNpZmllcik7XG4gICAgICAgIC8vIFNjcmlwdHMgZG8gbm90IGhhdmUgYSBzeW1ib2wsIGFuZCBuZWl0aGVyIGRvIHVudXNlZCBtb2R1bGVzLiBTY3JpcHRzIGNhbiBzdGlsbCBiZVxuICAgICAgICAvLyBpbXBvcnRlZCwgZWl0aGVyIGFzIHNpZGUgZWZmZWN0IGltcG9ydHMgb3Igd2l0aCBhbiBlbXB0eSBpbXBvcnQgc2V0IChcInt9XCIpLiBUeXBlU2NyaXB0XG4gICAgICAgIC8vIGRvZXMgbm90IGVtaXQgYSBydW50aW1lIGxvYWQgZm9yIGFuIGltcG9ydCB3aXRoIGFuIGVtcHR5IGxpc3Qgb2Ygc3ltYm9scywgYnV0IHRoZSBpbXBvcnRcbiAgICAgICAgLy8gZm9yY2VzIGFueSBnbG9iYWwgZGVjbGFyYXRpb25zIGZyb20gdGhlIGxpYnJhcnkgdG8gYmUgdmlzaWJsZSwgd2hpY2ggaXMgd2hhdCB1c2VycyB1c2VcbiAgICAgICAgLy8gdGhpcyBmb3IuIE5vIHN5bWJvbHMgZnJvbSB0aGUgc2NyaXB0IG5lZWQgcmVxdWlyZVR5cGUsIHNvIGp1c3QgcmV0dXJuLlxuICAgICAgICAvLyBUT0RPKGV2bWFyKTogcmV2aXNpdCB0aGlzLiAgSWYgVFMgbmVlZHMgdG8gc2VlIHRoZSBtb2R1bGUgaW1wb3J0LCBpdCdzIGxpa2VseSBDbG9zdXJlXG4gICAgICAgIC8vIGRvZXMgdG9vLlxuICAgICAgICBpZiAoIXN5bSkgcmV0dXJuIGltcG9ydERlY2w7XG5cbiAgICAgICAgY29uc3QgaW1wb3J0UGF0aCA9IGdvb2dtb2R1bGUucmVzb2x2ZU1vZHVsZU5hbWUoXG4gICAgICAgICAgICB7b3B0aW9uczogdHNPcHRpb25zLCBtb2R1bGVSZXNvbHV0aW9uSG9zdDogaG9zdC5tb2R1bGVSZXNvbHV0aW9uSG9zdH0sXG4gICAgICAgICAgICBzb3VyY2VGaWxlLmZpbGVOYW1lLCAoaW1wb3J0RGVjbC5tb2R1bGVTcGVjaWZpZXIgYXMgdHMuU3RyaW5nTGl0ZXJhbCkudGV4dCk7XG5cbiAgICAgICAgbW9kdWxlVHlwZVRyYW5zbGF0b3IucmVxdWlyZVR5cGUoXG4gICAgICAgICAgICBpbXBvcnRQYXRoLCBzeW0sXG4gICAgICAgICAgICAvKiBkZWZhdWx0IGltcG9ydD8gKi8gISFpbXBvcnREZWNsLmltcG9ydENsYXVzZS5uYW1lKTtcbiAgICAgICAgcmV0dXJuIGltcG9ydERlY2w7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ2xvc3VyZSBDb21waWxlciB3aWxsIGZhaWwgd2hlbiBpdCBmaW5kcyBpbmNvcnJlY3QgSlNEb2MgdGFncyBvbiBub2Rlcy4gVGhpcyBmdW5jdGlvblxuICAgICAgICogcGFyc2VzIGFuZCB0aGVuIHJlLXNlcmlhbGl6ZXMgSlNEb2MgY29tbWVudHMsIGVzY2FwaW5nIG9yIHJlbW92aW5nIGlsbGVnYWwgdGFncy5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gZXNjYXBlSWxsZWdhbEpTRG9jKG5vZGU6IHRzLk5vZGUpIHtcbiAgICAgICAgY29uc3QgbWpzZG9jID0gbW9kdWxlVHlwZVRyYW5zbGF0b3IuZ2V0TXV0YWJsZUpTRG9jKG5vZGUpO1xuICAgICAgICBtanNkb2MudXBkYXRlQ29tbWVudCgpO1xuICAgICAgfVxuXG4gICAgICAvKiogUmV0dXJucyB0cnVlIGlmIGEgdmFsdWUgZXhwb3J0IHNob3VsZCBiZSBlbWl0dGVkIGZvciB0aGUgZ2l2ZW4gc3ltYm9sIGluIGV4cG9ydCAqLiAqL1xuICAgICAgZnVuY3Rpb24gc2hvdWxkRW1pdFZhbHVlRXhwb3J0Rm9yU3ltYm9sKHN5bTogdHMuU3ltYm9sKTogYm9vbGVhbiB7XG4gICAgICAgIGlmIChzeW0uZmxhZ3MgJiB0cy5TeW1ib2xGbGFncy5BbGlhcykge1xuICAgICAgICAgIHN5bSA9IHR5cGVDaGVja2VyLmdldEFsaWFzZWRTeW1ib2woc3ltKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHN5bS5mbGFncyAmIHRzLlN5bWJvbEZsYWdzLlZhbHVlKSA9PT0gMCkge1xuICAgICAgICAgIC8vIE5vdGU6IFdlIGNyZWF0ZSBleHBsaWNpdCBleHBvcnRzIG9mIHR5cGUgc3ltYm9scyBmb3IgY2xvc3VyZSBpbiB2aXNpdEV4cG9ydERlY2xhcmF0aW9uLlxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRzT3B0aW9ucy5wcmVzZXJ2ZUNvbnN0RW51bXMgJiYgc3ltLmZsYWdzICYgdHMuU3ltYm9sRmxhZ3MuQ29uc3RFbnVtKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIHZpc2l0RXhwb3J0RGVjbGFyYXRpb24gcmVxdWlyZVR5cGVzIGV4cG9ydGVkIG1vZHVsZXMgYW5kIGVtaXRzIGV4cGxpY2l0IGV4cG9ydHMgZm9yXG4gICAgICAgKiB0eXBlcyAod2hpY2ggbm9ybWFsbHkgZG8gbm90IGdldCBlbWl0dGVkIGJ5IFR5cGVTY3JpcHQpLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiB2aXNpdEV4cG9ydERlY2xhcmF0aW9uKGV4cG9ydERlY2w6IHRzLkV4cG9ydERlY2xhcmF0aW9uKTogdHMuTm9kZXx0cy5Ob2RlW10ge1xuICAgICAgICBjb25zdCBpbXBvcnRlZE1vZHVsZVN5bWJvbCA9IGV4cG9ydERlY2wubW9kdWxlU3BlY2lmaWVyICYmXG4gICAgICAgICAgICB0eXBlQ2hlY2tlci5nZXRTeW1ib2xBdExvY2F0aW9uKGV4cG9ydERlY2wubW9kdWxlU3BlY2lmaWVyKSE7XG4gICAgICAgIGlmIChpbXBvcnRlZE1vZHVsZVN5bWJvbCkge1xuICAgICAgICAgIC8vIHJlcXVpcmVUeXBlIGFsbCBleHBsaWNpdGx5IGltcG9ydGVkIG1vZHVsZXMsIHNvIHRoYXQgc3ltYm9scyBjYW4gYmUgcmVmZXJlbmNlZCBhbmRcbiAgICAgICAgICAvLyB0eXBlIG9ubHkgbW9kdWxlcyBhcmUgdXNhYmxlIGZyb20gdHlwZSBkZWNsYXJhdGlvbnMuXG4gICAgICAgICAgbW9kdWxlVHlwZVRyYW5zbGF0b3IucmVxdWlyZVR5cGUoXG4gICAgICAgICAgICAgIChleHBvcnREZWNsLm1vZHVsZVNwZWNpZmllciBhcyB0cy5TdHJpbmdMaXRlcmFsKS50ZXh0LCBpbXBvcnRlZE1vZHVsZVN5bWJvbCxcbiAgICAgICAgICAgICAgLyogZGVmYXVsdCBpbXBvcnQ/ICovIGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHR5cGVzVG9FeHBvcnQ6IEFycmF5PFtzdHJpbmcsIHRzLlN5bWJvbF0+ID0gW107XG4gICAgICAgIGlmICghZXhwb3J0RGVjbC5leHBvcnRDbGF1c2UpIHtcbiAgICAgICAgICAvLyBleHBvcnQgKiBmcm9tICcuLi4nXG4gICAgICAgICAgLy8gUmVzb2x2ZSB0aGUgKiBpbnRvIGFsbCB2YWx1ZSBzeW1ib2xzIGV4cG9ydGVkLCBhbmQgdXBkYXRlIHRoZSBleHBvcnQgZGVjbGFyYXRpb24uXG5cbiAgICAgICAgICAvLyBFeHBsaWNpdGx5IHNwZWxsZWQgb3V0IGV4cG9ydHMgKGkuZS4gdGhlIGV4cG9ydHMgb2YgdGhlIGN1cnJlbnQgbW9kdWxlKSB0YWtlIHByZWNlZGVuY2VcbiAgICAgICAgICAvLyBvdmVyIGltcGxpY2l0IG9uZXMgZnJvbSBleHBvcnQgKi4gVXNlIHRoZSBjdXJyZW50IG1vZHVsZSdzIGV4cG9ydHMgdG8gZmlsdGVyLlxuICAgICAgICAgIGNvbnN0IGN1cnJlbnRNb2R1bGVTeW1ib2wgPSB0eXBlQ2hlY2tlci5nZXRTeW1ib2xBdExvY2F0aW9uKHNvdXJjZUZpbGUpO1xuICAgICAgICAgIGNvbnN0IGN1cnJlbnRNb2R1bGVFeHBvcnRzID0gY3VycmVudE1vZHVsZVN5bWJvbCAmJiBjdXJyZW50TW9kdWxlU3ltYm9sLmV4cG9ydHM7XG5cbiAgICAgICAgICBpZiAoIWltcG9ydGVkTW9kdWxlU3ltYm9sKSB7XG4gICAgICAgICAgICBtb2R1bGVUeXBlVHJhbnNsYXRvci5lcnJvcihleHBvcnREZWNsLCBgZXhwb3J0ICogd2l0aG91dCBtb2R1bGUgc3ltYm9sYCk7XG4gICAgICAgICAgICByZXR1cm4gZXhwb3J0RGVjbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgZXhwb3J0ZWRTeW1ib2xzID0gdHlwZUNoZWNrZXIuZ2V0RXhwb3J0c09mTW9kdWxlKGltcG9ydGVkTW9kdWxlU3ltYm9sKTtcbiAgICAgICAgICBjb25zdCBleHBvcnRTcGVjaWZpZXJzOiB0cy5FeHBvcnRTcGVjaWZpZXJbXSA9IFtdO1xuICAgICAgICAgIGZvciAoY29uc3Qgc3ltIG9mIGV4cG9ydGVkU3ltYm9scykge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRNb2R1bGVFeHBvcnRzICYmIGN1cnJlbnRNb2R1bGVFeHBvcnRzLmhhcyhzeW0uZXNjYXBlZE5hbWUpKSBjb250aW51ZTtcbiAgICAgICAgICAgIC8vIFdlIG1pZ2h0IGhhdmUgYWxyZWFkeSBnZW5lcmF0ZWQgYW4gZXhwb3J0IGZvciB0aGUgZ2l2ZW4gc3ltYm9sLlxuICAgICAgICAgICAgaWYgKGV4cGFuZGVkU3RhckltcG9ydHMuaGFzKHN5bS5uYW1lKSkgY29udGludWU7XG4gICAgICAgICAgICBleHBhbmRlZFN0YXJJbXBvcnRzLmFkZChzeW0ubmFtZSk7XG4gICAgICAgICAgICAvLyBPbmx5IGNyZWF0ZSBhbiBleHBvcnQgc3BlY2lmaWVyIGZvciB2YWx1ZXMgdGhhdCBhcmUgZXhwb3J0ZWQuIEZvciB0eXBlcywgdGhlIGNvZGVcbiAgICAgICAgICAgIC8vIGJlbG93IGNyZWF0ZXMgc3BlY2lmaWMgZXhwb3J0IHN0YXRlbWVudHMgdGhhdCBtYXRjaCBDbG9zdXJlJ3MgZXhwZWN0YXRpb25zLlxuICAgICAgICAgICAgaWYgKHNob3VsZEVtaXRWYWx1ZUV4cG9ydEZvclN5bWJvbChzeW0pKSB7XG4gICAgICAgICAgICAgIGV4cG9ydFNwZWNpZmllcnMucHVzaCh0cy5jcmVhdGVFeHBvcnRTcGVjaWZpZXIodW5kZWZpbmVkLCBzeW0ubmFtZSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdHlwZXNUb0V4cG9ydC5wdXNoKFtzeW0ubmFtZSwgc3ltXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGV4cG9ydERlY2wgPSB0cy51cGRhdGVFeHBvcnREZWNsYXJhdGlvbihcbiAgICAgICAgICAgICAgZXhwb3J0RGVjbCwgZXhwb3J0RGVjbC5kZWNvcmF0b3JzLCBleHBvcnREZWNsLm1vZGlmaWVycyxcbiAgICAgICAgICAgICAgdHMuY3JlYXRlTmFtZWRFeHBvcnRzKGV4cG9ydFNwZWNpZmllcnMpLCBleHBvcnREZWNsLm1vZHVsZVNwZWNpZmllcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9yIChjb25zdCBleHAgb2YgZXhwb3J0RGVjbC5leHBvcnRDbGF1c2UuZWxlbWVudHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4cG9ydGVkTmFtZSA9IHRyYW5zZm9ybWVyVXRpbC5nZXRJZGVudGlmaWVyVGV4dChleHAubmFtZSk7XG4gICAgICAgICAgICB0eXBlc1RvRXhwb3J0LnB1c2goXG4gICAgICAgICAgICAgICAgW2V4cG9ydGVkTmFtZSwgbW9kdWxlVHlwZVRyYW5zbGF0b3IubXVzdEdldFN5bWJvbEF0TG9jYXRpb24oZXhwLm5hbWUpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIERvIG5vdCBlbWl0IHR5cGVkZWYgcmUtZXhwb3J0cyBpbiB1bnR5cGVkIG1vZGUuXG4gICAgICAgIGlmIChob3N0LnVudHlwZWQpIHJldHVybiBleHBvcnREZWNsO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdDogdHMuTm9kZVtdID0gW2V4cG9ydERlY2xdO1xuICAgICAgICBmb3IgKGNvbnN0IFtleHBvcnRlZE5hbWUsIHN5bV0gb2YgdHlwZXNUb0V4cG9ydCkge1xuICAgICAgICAgIGxldCBhbGlhc2VkU3ltYm9sID0gc3ltO1xuICAgICAgICAgIGlmIChzeW0uZmxhZ3MgJiB0cy5TeW1ib2xGbGFncy5BbGlhcykge1xuICAgICAgICAgICAgYWxpYXNlZFN5bWJvbCA9IHR5cGVDaGVja2VyLmdldEFsaWFzZWRTeW1ib2woc3ltKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgaXNUeXBlQWxpYXMgPSAoYWxpYXNlZFN5bWJvbC5mbGFncyAmIHRzLlN5bWJvbEZsYWdzLlZhbHVlKSA9PT0gMCAmJlxuICAgICAgICAgICAgICAoYWxpYXNlZFN5bWJvbC5mbGFncyAmICh0cy5TeW1ib2xGbGFncy5UeXBlQWxpYXMgfCB0cy5TeW1ib2xGbGFncy5JbnRlcmZhY2UpKSAhPT0gMDtcbiAgICAgICAgICBpZiAoIWlzVHlwZUFsaWFzKSBjb250aW51ZTtcbiAgICAgICAgICBjb25zdCB0eXBlTmFtZSA9XG4gICAgICAgICAgICAgIG1vZHVsZVR5cGVUcmFuc2xhdG9yLnN5bWJvbHNUb0FsaWFzZWROYW1lcy5nZXQoYWxpYXNlZFN5bWJvbCkgfHwgYWxpYXNlZFN5bWJvbC5uYW1lO1xuICAgICAgICAgIGNvbnN0IHN0bXQgPSB0cy5jcmVhdGVTdGF0ZW1lbnQoXG4gICAgICAgICAgICAgIHRzLmNyZWF0ZVByb3BlcnR5QWNjZXNzKHRzLmNyZWF0ZUlkZW50aWZpZXIoJ2V4cG9ydHMnKSwgZXhwb3J0ZWROYW1lKSk7XG4gICAgICAgICAgYWRkQ29tbWVudE9uKHN0bXQsIFt7dGFnTmFtZTogJ3R5cGVkZWYnLCB0eXBlOiAnIScgKyB0eXBlTmFtZX1dKTtcbiAgICAgICAgICB0cy5hZGRTeW50aGV0aWNUcmFpbGluZ0NvbW1lbnQoXG4gICAgICAgICAgICAgIHN0bXQsIHRzLlN5bnRheEtpbmQuU2luZ2xlTGluZUNvbW1lbnRUcml2aWEsICcgcmUtZXhwb3J0IHR5cGVkZWYnLCB0cnVlKTtcbiAgICAgICAgICByZXN1bHQucHVzaChzdG10KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFJldHVybnMgdGhlIGlkZW50aWZpZXJzIGV4cG9ydGVkIGluIGEgc2luZ2xlIGV4cG9ydGVkIHN0YXRlbWVudCAtIHR5cGljYWxseSBqdXN0IG9uZVxuICAgICAgICogaWRlbnRpZmllciAoZS5nLiBmb3IgYGV4cG9ydCBmdW5jdGlvbiBmb28oKWApLCBidXQgbXVsdGlwbGUgZm9yIGBleHBvcnQgZGVjbGFyZSB2YXIgYSwgYmAuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGdldEV4cG9ydERlY2xhcmF0aW9uTmFtZXMobm9kZTogdHMuTm9kZSk6IHRzLklkZW50aWZpZXJbXSB7XG4gICAgICAgIHN3aXRjaCAobm9kZS5raW5kKSB7XG4gICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLlZhcmlhYmxlU3RhdGVtZW50OlxuICAgICAgICAgICAgY29uc3QgdmFyRGVjbCA9IG5vZGUgYXMgdHMuVmFyaWFibGVTdGF0ZW1lbnQ7XG4gICAgICAgICAgICByZXR1cm4gdmFyRGVjbC5kZWNsYXJhdGlvbkxpc3QuZGVjbGFyYXRpb25zLm1hcCgoZCkgPT4gZ2V0RXhwb3J0RGVjbGFyYXRpb25OYW1lcyhkKVswXSk7XG4gICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLlZhcmlhYmxlRGVjbGFyYXRpb246XG4gICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkZ1bmN0aW9uRGVjbGFyYXRpb246XG4gICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkludGVyZmFjZURlY2xhcmF0aW9uOlxuICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5DbGFzc0RlY2xhcmF0aW9uOlxuICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5Nb2R1bGVEZWNsYXJhdGlvbjpcbiAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuRW51bURlY2xhcmF0aW9uOlxuICAgICAgICAgICAgY29uc3QgZGVjbCA9IG5vZGUgYXMgdHMuTmFtZWREZWNsYXJhdGlvbjtcbiAgICAgICAgICAgIGlmICghZGVjbC5uYW1lIHx8IGRlY2wubmFtZS5raW5kICE9PSB0cy5TeW50YXhLaW5kLklkZW50aWZpZXIpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gW2RlY2wubmFtZV07XG4gICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLlR5cGVBbGlhc0RlY2xhcmF0aW9uOlxuICAgICAgICAgICAgY29uc3QgdHlwZUFsaWFzID0gbm9kZSBhcyB0cy5UeXBlQWxpYXNEZWNsYXJhdGlvbjtcbiAgICAgICAgICAgIHJldHVybiBbdHlwZUFsaWFzLm5hbWVdO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBtb2R1bGVUeXBlVHJhbnNsYXRvci5lcnJvcihcbiAgICAgICAgICAgIG5vZGUsIGB1bnN1cHBvcnRlZCBleHBvcnQgZGVjbGFyYXRpb24gJHt0cy5TeW50YXhLaW5kW25vZGUua2luZF19OiAke25vZGUuZ2V0VGV4dCgpfWApO1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQW1iaWVudCBkZWNsYXJhdGlvbnMgZGVjbGFyZSB0eXBlcyBmb3IgVHlwZVNjcmlwdCdzIGJlbmVmaXQsIGFuZCB3aWxsIGJlIHJlbW92ZWQgYnlcbiAgICAgICAqIFR5cGVTY3JpcHQgZHVyaW5nIGl0cyBlbWl0IHBoYXNlLiBEb3duc3RyZWFtIENsb3N1cmUgY29kZSBob3dldmVyIG1pZ2h0IGJlIGltcG9ydGluZ1xuICAgICAgICogc3ltYm9scyBmcm9tIHRoaXMgbW9kdWxlLCBzbyB0c2lja2xlIG11c3QgZW1pdCBhIENsb3N1cmUtY29tcGF0aWJsZSBleHBvcnRzIGRlY2xhcmF0aW9uLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiB2aXNpdEV4cG9ydGVkQW1iaWVudChub2RlOiB0cy5Ob2RlKTogdHMuTm9kZVtdIHtcbiAgICAgICAgaWYgKGhvc3QudW50eXBlZCB8fCAhc2hvdWxkRW1pdEV4cG9ydHNBc3NpZ25tZW50cygpKSByZXR1cm4gW25vZGVdO1xuXG4gICAgICAgIGNvbnN0IGRlY2xOYW1lcyA9IGdldEV4cG9ydERlY2xhcmF0aW9uTmFtZXMobm9kZSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdDogdHMuTm9kZVtdID0gW25vZGVdO1xuICAgICAgICBmb3IgKGNvbnN0IGRlY2wgb2YgZGVjbE5hbWVzKSB7XG4gICAgICAgICAgY29uc3Qgc3ltID0gdHlwZUNoZWNrZXIuZ2V0U3ltYm9sQXRMb2NhdGlvbihkZWNsKSE7XG4gICAgICAgICAgLy8gTm9uLXZhbHVlIG9iamVjdHMgZG8gbm90IGV4aXN0IGF0IHJ1bnRpbWUsIHNvIHdlIGNhbm5vdCBhY2Nlc3MgdGhlIHN5bWJvbCAoaXQgb25seVxuICAgICAgICAgIC8vIGV4aXN0cyBpbiBleHRlcm5zKS4gRXhwb3J0IHRoZW0gYXMgYSB0eXBlZGVmLCB3aGljaCBmb3J3YXJkcyB0byB0aGUgdHlwZSBpbiBleHRlcm5zLlxuICAgICAgICAgIC8vIE5vdGU6IFR5cGVTY3JpcHQgZW1pdHMgb2RkIGNvZGUgZm9yIGV4cG9ydGVkIGFtYmllbnRzIChleHBvcnRzLnggZm9yIHZhcmlhYmxlcywganVzdCB4XG4gICAgICAgICAgLy8gZm9yIGV2ZXJ5dGhpbmcgZWxzZSkuIFRoYXQgc2VlbXMgYnVnZ3ksIGFuZCBpbiBlaXRoZXIgY2FzZSB0aGlzIGNvZGUgc2hvdWxkIG5vdCBhdHRlbXB0XG4gICAgICAgICAgLy8gdG8gZml4IGl0LlxuICAgICAgICAgIC8vIFNlZSBhbHNvIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvODAxNS5cbiAgICAgICAgICBpZiAoIXN5bWJvbElzVmFsdWUodHlwZUNoZWNrZXIsIHN5bSkpIHtcbiAgICAgICAgICAgIC8vIERvIG5vdCBlbWl0IHJlLWV4cG9ydHMgZm9yIE1vZHVsZURlY2xhcmF0aW9ucy5cbiAgICAgICAgICAgIC8vIEFtYmllbnQgTW9kdWxlRGVjbGFyYXRpb25zIGFyZSBhbHdheXMgcmVmZXJlbmNlZCBhcyBnbG9iYWwgc3ltYm9scywgc28gdGhleSBkb24ndFxuICAgICAgICAgICAgLy8gbmVlZCB0byBiZSBleHBvcnRlZC5cbiAgICAgICAgICAgIGlmIChub2RlLmtpbmQgPT09IHRzLlN5bnRheEtpbmQuTW9kdWxlRGVjbGFyYXRpb24pIGNvbnRpbnVlO1xuICAgICAgICAgICAgY29uc3QgbWFuZ2xlZE5hbWUgPSBtb2R1bGVOYW1lQXNJZGVudGlmaWVyKGhvc3QsIHNvdXJjZUZpbGUuZmlsZU5hbWUpO1xuICAgICAgICAgICAgY29uc3QgZGVjbE5hbWUgPSB0cmFuc2Zvcm1lclV0aWwuZ2V0SWRlbnRpZmllclRleHQoZGVjbCk7XG4gICAgICAgICAgICBjb25zdCBzdG10ID0gdHMuY3JlYXRlU3RhdGVtZW50KFxuICAgICAgICAgICAgICAgIHRzLmNyZWF0ZVByb3BlcnR5QWNjZXNzKHRzLmNyZWF0ZUlkZW50aWZpZXIoJ2V4cG9ydHMnKSwgZGVjbE5hbWUpKTtcbiAgICAgICAgICAgIGFkZENvbW1lbnRPbihzdG10LCBbe3RhZ05hbWU6ICd0eXBlZGVmJywgdHlwZTogYCEke21hbmdsZWROYW1lfS4ke2RlY2xOYW1lfWB9XSk7XG4gICAgICAgICAgICByZXN1bHQucHVzaChzdG10KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdmlzaXRvcihub2RlOiB0cy5Ob2RlKTogdHMuTm9kZXx0cy5Ob2RlW10ge1xuICAgICAgICBpZiAodHJhbnNmb3JtZXJVdGlsLmlzQW1iaWVudChub2RlKSkge1xuICAgICAgICAgIGlmICghdHJhbnNmb3JtZXJVdGlsLmhhc01vZGlmaWVyRmxhZyhub2RlIGFzIHRzLkRlY2xhcmF0aW9uLCB0cy5Nb2RpZmllckZsYWdzLkV4cG9ydCkpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdmlzaXRFeHBvcnRlZEFtYmllbnQobm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChub2RlLmtpbmQpIHtcbiAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuSW1wb3J0RGVjbGFyYXRpb246XG4gICAgICAgICAgICByZXR1cm4gdmlzaXRJbXBvcnREZWNsYXJhdGlvbihub2RlIGFzIHRzLkltcG9ydERlY2xhcmF0aW9uKTtcbiAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuRXhwb3J0RGVjbGFyYXRpb246XG4gICAgICAgICAgICByZXR1cm4gdmlzaXRFeHBvcnREZWNsYXJhdGlvbihub2RlIGFzIHRzLkV4cG9ydERlY2xhcmF0aW9uKTtcbiAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuQ2xhc3NEZWNsYXJhdGlvbjpcbiAgICAgICAgICAgIHJldHVybiB2aXNpdENsYXNzRGVjbGFyYXRpb24obm9kZSBhcyB0cy5DbGFzc0RlY2xhcmF0aW9uKTtcbiAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuSW50ZXJmYWNlRGVjbGFyYXRpb246XG4gICAgICAgICAgICByZXR1cm4gdmlzaXRJbnRlcmZhY2VEZWNsYXJhdGlvbihub2RlIGFzIHRzLkludGVyZmFjZURlY2xhcmF0aW9uKTtcbiAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuSGVyaXRhZ2VDbGF1c2U6XG4gICAgICAgICAgICByZXR1cm4gdmlzaXRIZXJpdGFnZUNsYXVzZShub2RlIGFzIHRzLkhlcml0YWdlQ2xhdXNlKTtcbiAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuQXJyb3dGdW5jdGlvbjpcbiAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuRnVuY3Rpb25FeHByZXNzaW9uOlxuICAgICAgICAgICAgLy8gSW5zZXJ0aW5nIGEgY29tbWVudCBiZWZvcmUgYW4gZXhwcmVzc2lvbiBjYW4gdHJpZ2dlciBhdXRvbWF0aWMgc2VtaWNvbG9uIGluc2VydGlvbixcbiAgICAgICAgICAgIC8vIGUuZy4gaWYgdGhlIGZ1bmN0aW9uIGJlbG93IGlzIHRoZSBleHByZXNzaW9uIGluIGEgYHJldHVybmAgc3RhdGVtZW50LiBQYXJlbnRoZXNpemluZ1xuICAgICAgICAgICAgLy8gcHJldmVudHMgQVNJLCBhcyBsb25nIGFzIHRoZSBvcGVuaW5nIHBhcmVuIHJlbWFpbnMgb24gdGhlIHNhbWUgbGluZSAod2hpY2ggaXQgZG9lcykuXG4gICAgICAgICAgICByZXR1cm4gdHMuY3JlYXRlUGFyZW4oXG4gICAgICAgICAgICAgICAgdmlzaXRGdW5jdGlvbkxpa2VEZWNsYXJhdGlvbihub2RlIGFzIHRzLkFycm93RnVuY3Rpb24gfCB0cy5GdW5jdGlvbkV4cHJlc3Npb24pKTtcbiAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuQ29uc3RydWN0b3I6XG4gICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLkZ1bmN0aW9uRGVjbGFyYXRpb246XG4gICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLk1ldGhvZERlY2xhcmF0aW9uOlxuICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5HZXRBY2Nlc3NvcjpcbiAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuU2V0QWNjZXNzb3I6XG4gICAgICAgICAgICByZXR1cm4gdmlzaXRGdW5jdGlvbkxpa2VEZWNsYXJhdGlvbihub2RlIGFzIHRzLkZ1bmN0aW9uTGlrZURlY2xhcmF0aW9uKTtcbiAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuVGhpc0tleXdvcmQ6XG4gICAgICAgICAgICByZXR1cm4gdmlzaXRUaGlzRXhwcmVzc2lvbihub2RlIGFzIHRzLlRoaXNFeHByZXNzaW9uKTtcbiAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuVmFyaWFibGVTdGF0ZW1lbnQ6XG4gICAgICAgICAgICByZXR1cm4gdmlzaXRWYXJpYWJsZVN0YXRlbWVudChub2RlIGFzIHRzLlZhcmlhYmxlU3RhdGVtZW50KTtcbiAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuUHJvcGVydHlEZWNsYXJhdGlvbjpcbiAgICAgICAgICBjYXNlIHRzLlN5bnRheEtpbmQuUHJvcGVydHlBc3NpZ25tZW50OlxuICAgICAgICAgICAgZXNjYXBlSWxsZWdhbEpTRG9jKG5vZGUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLlBhcmFtZXRlcjpcbiAgICAgICAgICAgIC8vIFBhcmFtZXRlciBwcm9wZXJ0aWVzIChlLmcuIGBjb25zdHJ1Y3RvcigvKiogZG9jcyAqLyBwcml2YXRlIGZvbzogc3RyaW5nKWApIG1pZ2h0IGhhdmVcbiAgICAgICAgICAgIC8vIEpTRG9jIGNvbW1lbnRzLCBpbmNsdWRpbmcgSlNEb2MgdGFncyByZWNvZ25pemVkIGJ5IENsb3N1cmUgQ29tcGlsZXIuIFByZXZlbnQgZW1pdHRpbmdcbiAgICAgICAgICAgIC8vIGFueSBjb21tZW50cyBvbiB0aGVtLCBzbyB0aGF0IENsb3N1cmUgZG9lc24ndCBlcnJvciBvbiB0aGVtLlxuICAgICAgICAgICAgLy8gU2VlIHRlc3RfZmlsZXMvcGFyYW1ldGVyX3Byb3BlcnRpZXMudHMuXG4gICAgICAgICAgICBjb25zdCBwYXJhbURlY2wgPSBub2RlIGFzIHRzLlBhcmFtZXRlckRlY2xhcmF0aW9uO1xuICAgICAgICAgICAgaWYgKHRyYW5zZm9ybWVyVXRpbC5oYXNNb2RpZmllckZsYWcoXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtRGVjbCwgdHMuTW9kaWZpZXJGbGFncy5QYXJhbWV0ZXJQcm9wZXJ0eU1vZGlmaWVyKSkge1xuICAgICAgICAgICAgICB0cy5zZXRTeW50aGV0aWNMZWFkaW5nQ29tbWVudHMocGFyYW1EZWNsLCBbXSk7XG4gICAgICAgICAgICAgIGpzZG9jLnN1cHByZXNzTGVhZGluZ0NvbW1lbnRzUmVjdXJzaXZlbHkocGFyYW1EZWNsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5UeXBlQWxpYXNEZWNsYXJhdGlvbjpcbiAgICAgICAgICAgIHJldHVybiB2aXNpdFR5cGVBbGlhc0RlY2xhcmF0aW9uKG5vZGUgYXMgdHMuVHlwZUFsaWFzRGVjbGFyYXRpb24pO1xuICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5Bc0V4cHJlc3Npb246XG4gICAgICAgICAgY2FzZSB0cy5TeW50YXhLaW5kLlR5cGVBc3NlcnRpb25FeHByZXNzaW9uOlxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0QXNzZXJ0aW9uRXhwcmVzc2lvbihub2RlIGFzIHRzLlR5cGVBc3NlcnRpb24pO1xuICAgICAgICAgIGNhc2UgdHMuU3ludGF4S2luZC5Ob25OdWxsRXhwcmVzc2lvbjpcbiAgICAgICAgICAgIHJldHVybiB2aXNpdE5vbk51bGxFeHByZXNzaW9uKG5vZGUgYXMgdHMuTm9uTnVsbEV4cHJlc3Npb24pO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHMudmlzaXRFYWNoQ2hpbGQobm9kZSwgdmlzaXRvciwgY29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIHNvdXJjZUZpbGUgPSB0cy52aXNpdEVhY2hDaGlsZChzb3VyY2VGaWxlLCB2aXNpdG9yLCBjb250ZXh0KTtcblxuICAgICAgcmV0dXJuIG1vZHVsZVR5cGVUcmFuc2xhdG9yLmluc2VydEFkZGl0aW9uYWxJbXBvcnRzKHNvdXJjZUZpbGUpO1xuICAgIH07XG4gIH07XG59XG4iXX0=