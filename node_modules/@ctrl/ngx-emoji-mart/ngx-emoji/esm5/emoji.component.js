import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import { DEFAULT_BACKGROUNDFN, EmojiService } from './emoji.service';
var EmojiComponent = /** @class */ (function () {
    function EmojiComponent(emojiService) {
        this.emojiService = emojiService;
        this.skin = 1;
        this.set = 'apple';
        this.sheetSize = 64;
        /** Renders the native unicode emoji */
        this.isNative = false;
        this.forceSize = false;
        this.tooltip = false;
        this.size = 24;
        this.emoji = '';
        this.hideObsolete = false;
        this.SHEET_COLUMNS = 52;
        this.emojiOver = new EventEmitter();
        this.emojiLeave = new EventEmitter();
        this.emojiClick = new EventEmitter();
        this.title = '';
        this.label = '';
        this.custom = false;
        this.isVisible = true;
        // TODO: replace 4.0.3 w/ dynamic get verison from emoji-datasource in package.json
        this.backgroundImageFn = DEFAULT_BACKGROUNDFN;
    }
    EmojiComponent.prototype.ngOnChanges = function () {
        if (!this.emoji) {
            return (this.isVisible = false);
        }
        var data = this.getData();
        if (!data) {
            return (this.isVisible = false);
        }
        // const children = this.children;
        this.unified = data.native || null;
        if (data.custom) {
            this.custom = data.custom;
        }
        if (!data.unified && !data.custom) {
            return (this.isVisible = false);
        }
        if (this.tooltip) {
            this.title = data.shortNames[0];
        }
        if (data.obsoletedBy && this.hideObsolete) {
            return (this.isVisible = false);
        }
        this.label = [data.native]
            .concat(data.shortNames)
            .filter(Boolean)
            .join(', ');
        if (this.isNative && data.unified && data.native) {
            // hide older emoji before the split into gendered emoji
            this.style = { fontSize: this.size + "px" };
            if (this.forceSize) {
                this.style.display = 'inline-block';
                this.style.width = this.size + "px";
                this.style.height = this.size + "px";
                this.style['word-break'] = 'keep-all';
            }
        }
        else if (data.custom) {
            this.style = {
                width: this.size + "px",
                height: this.size + "px",
                display: 'inline-block',
            };
            if (data.spriteUrl && this.sheetRows && this.sheetColumns) {
                this.style = tslib_1.__assign({}, this.style, { backgroundImage: "url(" + data.spriteUrl + ")", backgroundSize: 100 * this.sheetColumns + "% " + 100 *
                        this.sheetRows + "%", backgroundPosition: this.emojiService.getSpritePosition(data.sheet, this.sheetColumns) });
            }
            else {
                this.style = tslib_1.__assign({}, this.style, { backgroundImage: "url(" + data.imageUrl + ")", backgroundSize: 'contain' });
            }
        }
        else {
            if (data.hidden.length && data.hidden.includes(this.set)) {
                if (this.fallback) {
                    this.style = { fontSize: this.size + "px" };
                    this.unified = this.fallback(data, this);
                }
                else {
                    return (this.isVisible = false);
                }
            }
            else {
                this.style = this.emojiService.emojiSpriteStyles(data.sheet, this.set, this.size, this.sheetSize, this.backgroundImageFn, this.SHEET_COLUMNS);
            }
        }
        return (this.isVisible = true);
    };
    EmojiComponent.prototype.getData = function () {
        return this.emojiService.getData(this.emoji, this.skin, this.set);
    };
    EmojiComponent.prototype.getSanitizedData = function () {
        return this.emojiService.getSanitizedData(this.emoji, this.skin, this.set);
    };
    EmojiComponent.prototype.handleClick = function ($event) {
        var emoji = this.getSanitizedData();
        this.emojiClick.emit({ emoji: emoji, $event: $event });
    };
    EmojiComponent.prototype.handleOver = function ($event) {
        var emoji = this.getSanitizedData();
        this.emojiOver.emit({ emoji: emoji, $event: $event });
    };
    EmojiComponent.prototype.handleLeave = function ($event) {
        var emoji = this.getSanitizedData();
        this.emojiLeave.emit({ emoji: emoji, $event: $event });
    };
    EmojiComponent.ctorParameters = function () { return [
        { type: EmojiService }
    ]; };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], EmojiComponent.prototype, "skin", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], EmojiComponent.prototype, "set", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], EmojiComponent.prototype, "sheetSize", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], EmojiComponent.prototype, "isNative", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], EmojiComponent.prototype, "forceSize", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], EmojiComponent.prototype, "tooltip", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], EmojiComponent.prototype, "size", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], EmojiComponent.prototype, "emoji", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], EmojiComponent.prototype, "fallback", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], EmojiComponent.prototype, "hideObsolete", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], EmojiComponent.prototype, "SHEET_COLUMNS", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], EmojiComponent.prototype, "sheetRows", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], EmojiComponent.prototype, "sheetColumns", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], EmojiComponent.prototype, "emojiOver", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], EmojiComponent.prototype, "emojiLeave", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], EmojiComponent.prototype, "emojiClick", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], EmojiComponent.prototype, "backgroundImageFn", void 0);
    EmojiComponent = tslib_1.__decorate([
        Component({
            selector: 'ngx-emoji',
            template: "\n  <button *ngIf=\"isVisible\"\n    type=\"button\"\n    (click)=\"handleClick($event)\"\n    (mouseenter)=\"handleOver($event)\"\n    (mouseleave)=\"handleLeave($event)\"\n    [title]=\"title\"\n    [attr.aria-label]=\"label\"\n    class=\"emoji-mart-emoji\"\n    [class.emoji-mart-emoji-native]=\"isNative\"\n    [class.emoji-mart-emoji-custom]=\"custom\">\n    <span [ngStyle]=\"style\">\n      <ng-template [ngIf]=\"isNative\">{{ unified }}</ng-template>\n      <ng-content></ng-content>\n    </span>\n  </button>\n  ",
            changeDetection: ChangeDetectionStrategy.OnPush,
            preserveWhitespaces: false
        }),
        tslib_1.__metadata("design:paramtypes", [EmojiService])
    ], EmojiComponent);
    return EmojiComponent;
}());
export { EmojiComponent };
//# sourceMappingURL=data:application/json;base64,